//import org.gradle.jvm.platform.internal.DefaultJavaPlatform
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

// Java plugin is applied in the parent build
apply plugin: 'groovy'
apply plugin: 'c'

configurations {
    jni
}

// TODO Use Maven/Ivy repo from publishing plugin
def nativePublicationTasks = new LinkedHashSet()

// FIXME Use of internal Gradle classes
def os = new DefaultNativePlatform('current').operatingSystem
def arch = new DefaultNativePlatform('current').architecture

// High-level build definitions
model {

    platforms {
        windows_x64 {
            architecture 'x86_64'
            operatingSystem 'windows'
        }
    }

    toolChains {
        visualCpp(VisualCpp)
    }

    components {
        geoclient(NativeLibrarySpec) {
            targetPlatform 'windows_x64'
            sources {
                c {
                    source {
                        srcDir 'src/main/c'
                        include '**/geoclient.c'
                    }
                    exportedHeaders {
                        srcDir 'src/main/headers'
                        include '**/*.h'
                    }
                    lib library: 'geosupport', linkage: 'api'
                }
            } // sources
        } // geoclient

        geoclientJni(NativeLibrarySpec) {
            targetPlatform 'windows_x64'
            baseName 'geoclientjni'
            sources {
                c {
                    source {
                        srcDir 'src/main/c'
                        include '**/*_JNI.c'
                    }
                    lib library: 'geosupport', linkage: 'api'
                    lib library: 'geoclient',  linkage: 'static'
                }
            } // sources
        } // geoclientjni

        // All buildable native binaries (shared, static and executable)
        all {
            // Compiler/linker customizations
            binaries.all {
                // MSVC (Windows x64)
                cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                linker.args "/LIBPATH:${gsLibraryPath}"
                linker.args 'NYCgeo.lib'
            }

            // Shared libraries
            binaries.withType(SharedLibraryBinarySpec) { binary ->

                def variantName = targetPlatform.name.replace('_', '-')

                logger.lifecycle("variantName: ${variantName}")

                if(!buildable) {
                    return
                }

                cCompiler.define 'DLL_EXPORT'

                def taskName = "jar-${variantName}"
                def nativeJar = project.tasks.findByName(taskName)
                if (nativeJar == null) {
                    nativeJar = project.tasks.create(taskName, Jar) {
                        baseName = "${project.name}-${variantName}"
                    }
                    artifacts {
                        jni nativeJar
                        runtime nativeJar
                    }
                }
                project.tasks.assemble.dependsOn(taskName)
                nativePublicationTasks << taskName

                logger.lifecycle("nativeJar.name: ${nativeJar.name}")
                logger.lifecycle("nativeJar.archivePath: ${nativeJar.archivePath}")

                binary.tasks.withType(LinkSharedLibrary) { builderTask ->
                    String fileName = "${builderTask.linkedFile}"
                    if(fileName =~ /geoclientjni/) {
                        nativeJar.into("gov/nyc/doitt/gis/geoclient/jni/$variantName") {
                            from builderTask.linkedFile
                        }
                        def sharedLibFile = file(fileName)
                        artifacts.add('archives', sharedLibFile) {
                            type 'nativeJar'
                            builtBy taskName
                        }
                    }
                }

                project.tasks.test {
                    classpath.from nativeJar
                }

            }

            // Static libraries
            binaries.withType(StaticLibraryBinarySpec) { binary ->
                if(!buildable) {
                    return
                }
                cCompiler.define 'DLL_IMPORT'
            }
        } // all
    } // components

    // Third-party binaries and header files
    repositories {
        libs(PrebuiltLibraries) {
            geosupport {
                headers.srcDir(gsIncludePath)
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = new File("${gsLibraryPath}/NYCgeo.dll")
                    sharedLibraryLinkFile = new File("${gsLibraryPath}/NYCgeo.lib")
                }
            }
        }
    } // repositories
} // model

//rootProject.publishing.publications {
//    maven(MavenPublication) {
//        artifacts nativeJarArtifact
//    }
//}
