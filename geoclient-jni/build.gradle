// Java plugin is applied in the parent build
apply plugin: 'groovy'
apply plugin: 'c'

tasks.jar {
    dependsOn('geoclientjniSharedLibrary')
    manifest {
        attributes 'Main-Class': 'gov.nyc.doitt.gis.geoclient.jni.test.JniTest'
    }
}

def basePackagePath = "gov/nyc/doitt/gis/geoclient/jni"
def generatedResources = "${project.buildDir}/generated-resources/main"

sourceSets {
	main {
		output.dir(generatedResources, builtBy: 'syncJniLib')
	}
}

// Must be configured lazily because 'from' and 'destinationDir' properties are
// created dynamically by SharedLibraryBinarySpec
task syncJniLib(type: Sync)

// High-level build definitions
model {

    platforms {
        windows_x64 {
            architecture 'x86_64'
            operatingSystem 'windows'
        }
    }

    toolChains {
        visualCpp(VisualCpp)
    }

    components {
        geoclient(NativeLibrarySpec) {
            targetPlatform 'windows_x64'
            sources {
                c {
                    source {
                        srcDir 'src/main/c'
                        include '**/geoclient.c'
                    }
                    exportedHeaders {
                        srcDir 'src/main/headers'
                        include '**/*.h'
                    }
                    lib library: 'geosupport', linkage: 'api'
                }
            } // sources
        } // geoclient

        geoclientjni(NativeLibrarySpec) {
            targetPlatform 'windows_x64'
            baseName 'geoclientjni'
            sources {
                c {
                    source {
                        srcDir 'src/main/c'
                        include '**/*_JNI.c'
                    }
                    lib library: 'geosupport', linkage: 'api'
                    lib library: 'geoclient',  linkage: 'static'
                }
            } // sources
        } // geoclientjni

        // All buildable native binaries (shared, static and executable)
        all {
            // Compiler/linker customizations
            binaries.all {
                // MSVC (Windows x64)
                cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                linker.args "/LIBPATH:${gsLibraryPath}"
                linker.args 'NYCgeo.lib'
            }

            // When building our project's shared libraries on Windows, insure
            // that we enable the Microsoft macros to export pur dlls
            binaries.withType(SharedLibraryBinarySpec) { binary ->
                logger.info("Configuring ${displayName}")
                if(targetPlatform.operatingSystem == "windows") {
                    cCompiler.define 'DLL_EXPORT'
                }
            }

            binaries.withType(SharedLibraryBinarySpec) { binary ->

                if(!buildable) {
                    return
                }

                if(component.baseName != "geoclientjni") {
                    // Skip packaging/publishing tasks for all native binaries
                    // NOTE: geoclientjni statically links its dependency on 
                    // the geoclient native binary component. Thus, the geoclient
                    // component does not need to be published.
                    return
                }

                def syncTask = project.tasks.findByName('syncJniLib')
                if (syncTask == null) {
                    logger.error("Task 'syncJniLib' was not found")
                    return
                }
                
                def variantName = targetPlatform.name.replace('_', '-')
				def syncDir = project.file("${generatedResources}/${basePackagePath}/${variantName}")
                binary.tasks.withType(LinkSharedLibrary) { builderTask ->
                	def jniLib = builderTask.linkedFile
                	logger.lifecycle("Syncing JNI shared library file\n  from: ${jniLib?.getAsFile()?.get()}\n    to: ${syncDir}")                
             		syncTask.from(jniLib)
             		syncTask.destinationDir = syncDir
                }
            }

            // Static libraries
            binaries.withType(StaticLibraryBinarySpec) { binary ->
                if(!buildable) {
                    return
                }
                cCompiler.define 'DLL_IMPORT'
            }
            
        } // all
    } // components

    // Third-party binaries and header files
    repositories {
        libs(PrebuiltLibraries) {
            geosupport {
                headers.srcDir(gsIncludePath)
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = new File("${gsLibraryPath}/NYCgeo.dll")
                    sharedLibraryLinkFile = new File("${gsLibraryPath}/NYCgeo.lib")
                }
            }
        }
    } // repositories
} // model
