//import org.gradle.jvm.platform.internal.DefaultJavaPlatform
//import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

// Java plugin is applied in the parent build
apply plugin: 'groovy'
apply plugin: 'c'

configurations {
    jni
}

// High-level build definitions
model {

    platforms {
        windows_x64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
    }

    toolChains {
        visualCpp(VisualCpp)
    }

    components {
        geoclient(NativeLibrarySpec) {
            targetPlatform "windows_x64"
            sources {
                c {
                    source {
                        srcDir "src/main/c"
                        include "**/geoclient.c"
                    }
                    exportedHeaders {
                        srcDir "src/main/headers"
                        include "**/*.h"
                    }
                    lib library: 'geosupport', linkage: 'api'
                }
            } // sources
        } // geoclient

        geoclientJni(NativeLibrarySpec) {
            targetPlatform "windows_x64"
            baseName "geoclientjni"
            sources {
                c {
                    source {
                        srcDir "src/main/c"
                        include "**/*_JNI.c"
                    }
                    lib library: 'geosupport', linkage: 'api'
                    lib library: 'geoclient',  linkage: 'static'
                }
            } // sources
        } // geoclientjni

        // All buildable native binaries (shared, static and executable)
        all {
            // Compiler/linker customizations
            binaries.all {
                // MSVC (Windows x64)
                cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                linker.args "/LIBPATH:${gsLibraryPath}"
                linker.args "NYCgeo.lib"
            }

            // Shared libraries
            binaries.withType(SharedLibraryBinarySpec) { binary ->
                if(!buildable) {
                    return
                }
                cCompiler.define "DLL_EXPORT"
            }

            // Static libraries
            binaries.withType(StaticLibraryBinarySpec) { binary ->
                if(!buildable) {
                    return
                }
                cCompiler.define "DLL_IMPORT"
            }
        }
    } // components

    // Third-party binaries and header files
    repositories {
        libs(PrebuiltLibraries) {
            geosupport {
                headers.srcDir(gsIncludePath)
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = new File("${gsLibraryPath}/NYCgeo.dll")
                    sharedLibraryLinkFile = new File("${gsLibraryPath}/NYCgeo.lib")
                }
            }
        }
    } // repositories
} // model
