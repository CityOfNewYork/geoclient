plugins {
    id 'c'
    id 'geoclient.library-conventions'
    id 'geoclient.test-conventions'
}

def basePackagePath = "gov/nyc/doitt/gis/geoclient/jni"
def generatedResources = "${project.buildDir}/generated-resources/main"
def libPath = geosupport.libraryPath.getOrNull()

sourceSets {
  main {
    output.dir(generatedResources, builtBy: 'syncJniLib')
  }
}

spotless.java {
    // Exclude from spotless (gradle plugin) license header check because of custom header.
    targetExclude 'src/main/java/gov/nyc/doitt/gis/geoclient/jni/util/NativeLibraryLocator.java'
}

// Must be configured lazily because 'from' and 'destinationDir' properties are
// created dynamically by SharedLibraryBinarySpec
task syncJniLib(type: Sync)

// High-level build definitions
model {

    platforms {
        linux_x64 {
            architecture "x86_64"
            operatingSystem "linux"
        }
        windows_x64 {
            architecture 'x86_64'
            operatingSystem 'windows'
        }
    }

    toolChains {
        gcc(Gcc)
        visualCpp(VisualCpp)
    }

    components {
        geoclient(NativeLibrarySpec) {
            targetPlatform 'linux_x64'
            targetPlatform 'windows_x64'
            sources {
                c {
                    source {
                        srcDir 'src/main/c'
                        include '**/geoclient.c'
                    }
                    exportedHeaders {
                        srcDir 'src/main/headers'
                        include '**/*.h'
                    }
                    lib library: 'libgeo', linkage: 'api'
                }
            } // sources
        } // geoclient

        geoclientjni(NativeLibrarySpec) {
            targetPlatform 'linux_x64'
            targetPlatform 'windows_x64'
            baseName 'geoclientjni'
            sources {
                c {
                    source {
                        srcDir 'src/main/c'
                        include '**/*_JNI.c'
                    }
                    lib library: 'libgeo', linkage: 'api'
                    lib library: 'geoclient',  linkage: 'static'
                }
            } // sources
        } // geoclientjni

        // All buildable native binaries (shared, static and executable)
        all {
            // Compiler/linker customizations
            binaries.all {
                if (targetPlatform.operatingSystem.linux && toolChain in Gcc) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args "-o0", "-g3", "-Wall", "-std=c99"
                    // Platform independent code flag:
                    //  Still required for shared libs?
                    //  Required for static libs and executables?
                    cCompiler.args "-fPIC"
                    // Ordering of library linkage is different than on Windows/MSYS2/MINGW64
                    linker.args "-Wl,--no-as-needed", "-L${libPath}", "-lc", "-lgeo", "-lm", "-ledequiv", "-lapequiv", "-lsan", "-lsnd", "-lstExcpt", "-lStdLast", "-lStdUniv", "-lstEnder", "-lstretch", "-lthined"

                } else if (targetPlatform.operatingSystem.windows && toolChain in VisualCpp) {
                    // MSVC (Windows x64)
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "/LIBPATH:${libPath}"
                    linker.args 'NYCgeo.lib'
                }
            }

            // When building our project's shared libraries on Windows, insure
            // that we enable the Microsoft macros to export our dlls
            binaries.withType(SharedLibraryBinarySpec) { binary ->
                logger.info("Configuring ${displayName}")
                if(targetPlatform.operatingSystem == "windows") {
                    cCompiler.define 'DLL_EXPORT'
                }
            }

            binaries.withType(SharedLibraryBinarySpec) { binary ->

                if(!buildable) {
                    return
                }

                if(component.baseName != "geoclientjni") {
                    // Skip packaging/publishing tasks for all native binaries
                    // NOTE: geoclientjni statically links its dependency on
                    // the geoclient native binary component. Thus, the geoclient
                    // component does not need to be published.
                    return
                }

                def syncTask = project.tasks.findByName('syncJniLib')
                if (syncTask == null) {
                    logger.error("Task 'syncJniLib' was not found")
                    return
                }

                def variantName = targetPlatform.name.replace('_', '-')
                def syncDir = project.file("${generatedResources}/${basePackagePath}/${variantName}")
                binary.tasks.withType(LinkSharedLibrary) { builderTask ->
                    def jniLib = builderTask.linkedFile
                    logger.info("Syncing JNI shared library file\n  from: ${jniLib?.getAsFile()?.get()}\n    to: ${syncDir}")
                    syncTask.from(jniLib)
                    syncTask.destinationDir = syncDir
                }
            }

            // Static libraries
            binaries.withType(StaticLibraryBinarySpec) { binary ->
                if(!buildable) {
                    return
                }
                cCompiler.define 'DLL_IMPORT'
            }

        } // all
    } // components

    // Third-party binaries and header files
    repositories {
        libs(PrebuiltLibraries) {
            libgeo {
                headers.srcDir(geosupport.includePath.getAsFile())
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = new File("${libPath}/NYCgeo.dll")
                    sharedLibraryLinkFile = new File("${libPath}/NYCgeo.lib")
                }
            }
        }
    } // repositories
} // model
