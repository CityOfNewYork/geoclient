/* !---- DO NOT EDIT: This file autogenerated by Gluegen ----! */

package gov.nyc.doitt.gis.geoclient.jni;

// import com.jogamp.gluegen.runtime.*;
// import com.jogamp.common.os.*;
import com.jogamp.common.nio.Buffers;
import java.nio.*;

public class GeoclientImpl implements Geoclient{
  /** Interface to C language function: <br> <code> void callgeo(char *  work_area1, char *  work_area2) </code> 
      @param work_area1 a direct or array-backed {@link java.nio.ByteBuffer}
      @param work_area2 a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void callgeo(ByteBuffer work_area1, ByteBuffer work_area2)  {

    final boolean work_area1_is_direct = Buffers.isDirect(work_area1);
    final boolean work_area2_is_direct = Buffers.isDirect(work_area2);
        callgeo1(work_area1_is_direct ? work_area1 : Buffers.getArray(work_area1), work_area1_is_direct ? Buffers.getDirectBufferByteOffset(work_area1) : Buffers.getIndirectBufferByteOffset(work_area1), work_area1_is_direct, work_area2_is_direct ? work_area2 : Buffers.getArray(work_area2), work_area2_is_direct ? Buffers.getDirectBufferByteOffset(work_area2) : Buffers.getIndirectBufferByteOffset(work_area2), work_area2_is_direct);
  }

  /** Entry point to C language function: <code> void callgeo(char *  work_area1, char *  work_area2) </code> 
      @param work_area1 a direct or array-backed {@link java.nio.ByteBuffer}
      @param work_area2 a direct or array-backed {@link java.nio.ByteBuffer}   */
  private native void callgeo1(Object work_area1, int work_area1_byte_offset, boolean work_area1_is_direct, Object work_area2, int work_area2_byte_offset, boolean work_area2_is_direct);

  /** Interface to C language function: <br> <code> void callgeo(char *  work_area1, char *  work_area2) </code>    */
  public void callgeo(byte[] work_area1, int work_area1_offset, byte[] work_area2, int work_area2_offset)  {

    if(work_area1 != null && work_area1.length <= work_area1_offset)
      throw new RuntimeException("array offset argument \"work_area1_offset\" (" + work_area1_offset + ") equals or exceeds array length (" + work_area1.length + ")");
    if(work_area2 != null && work_area2.length <= work_area2_offset)
      throw new RuntimeException("array offset argument \"work_area2_offset\" (" + work_area2_offset + ") equals or exceeds array length (" + work_area2.length + ")");
        callgeo1(work_area1, work_area1_offset, false, work_area2, work_area2_offset, false);
  }


  // --- Begin CustomJavaCode .cfg declarations
 static
 {   
     //
     // System.loadLibrary(String): uses the paths specified in Java System variable 'java.library.path'
     // System.load(String): uses platform-dependant absolute path
     //
     // Loads
     //       libgeoclient_jni.so (on Linux)
     //       geoclient_jni.dll   (on Windows)
     //
     // TODO: Confirm the following:
     // Both methods add any paths defined by the standard platform-specific lib paths (LD_LIBRARY, PATH, etc.)
     // to the overall library path that were defined by the environment owning the parent Java process.
     // 
     System.loadLibrary(geoclient_jni);
 }
  // ---- End CustomJavaCode .cfg declarations

} // end of class GeoclientImpl
