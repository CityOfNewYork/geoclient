/**
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'eclipse'
    id 'maven-publish'
}

group 'gov.nyc.doitt.gis.geoclient.gradle'
version '1.0.0'

ext {
    pluginRepoName = project.findProperty('pluginRepoName') ?: "${project.name}-repo"
    pluginRepoUrl = project.findProperty('pluginRepoUrl') ?: '../maven-repo'
    library = [:]
    library['junit4'] = 'junit:junit:4.12'
    library['junit5JupiterApi'] = 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    library['junit5JupiterEngine'] = 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    library['junit5VintageEngine'] = 'org.junit.vintage:junit-vintage-engine:5.1.0'
    library['spockCore'] = 'org.spockframework:spock-core:1.2-groovy-2.5'
    library['spockCoreExcludes'] = ['group' : 'org.codehaus.groovy']
}

sourceSets {
    functionalTest {
        groovy {
            srcDir file('src/functionalTest/groovy')
        }
        resources {
            srcDir file('src/functionalTest/resources')
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    //useJUnitPlatform {
    //}
    testLogging {
        displayGranularity = 3
        events 'failed', 'skipped', 'passed'
        exceptionFormat 'full'
        showStandardStreams = true
    }
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest
    plugins {
        geoclientPlugin {
            id = 'gov.nyc.doitt.gis.geoclient.gradle.geoclient-plugin'
            implementationClass = 'gov.nyc.doitt.gis.geoclient.gradle.GeoclientPlugin'
        }
    }
}

def eclipseBuildDir = file('bin')

eclipse {
  classpath {
    //configurations.each { c -> println c }
    plusConfigurations += [configurations.functionalTestCompileClasspath]
    if(eclipseBuildDir != defaultOutputDir.parent) {
        eclipseBuildDir = defaultOutputDir.parent
    }
  }
}

task deleteEclipseBuildDir(type: Delete) {
  delete eclipseBuildDir
}

task cleanAllEclipse(type: Delete) {
  dependsOn([cleanEclipse, deleteEclipseBuildDir])
}

repositories {
    mavenCentral()
}

dependencies {

    // Java SourceSet 'main' dependencies provided by plugins
    // - Groovy lang -> groovy plugin
    // - Gradle API  -> gradle-java-plugin plugin
    //
    // Java SourceSet 'test' dependencies
    testImplementation(library.junit5JupiterApi)
    testRuntimeOnly(library.junit5JupiterEngine)
    // Groovy SourceSet 'functionalTest' dependencies
    functionalTestImplementation(library.spockCore) {
        // Exclude transitive Groovy lang dependencies because they are
        // added by the groovy plugin
        exclude(library.spockCoreExcludes)
    }
    functionalTestImplementation(library.junit4)
    functionalTestImplementation(library.junit5JupiterApi)
    functionalTestImplementation(library.junit5VintageEngine)
}

test {
    testLogging {
        displayGranularity = 3
        events "failed", "skipped", "passed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

publishing {
    repositories {
        maven {
            name pluginRepoName
            url pluginRepoUrl
        }
    }
}
