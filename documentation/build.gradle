import java.nio.file.*
import java.net.URI

plugins {
    id 'geoclient.library-conventions'
    id 'geoclient.test-conventions'
	alias(libs.plugins.asciidoctorConvert)
	alias(libs.plugins.asciidoctorPdf)
}

configurations {
    internalServerClasspath {
        canBeConsumed = false
    }
}
dependencies {
    implementation(libs.httpclient)
    implementation('org.springframework.boot:spring-boot-starter-json')
    integrationTestImplementation(project(':geoclient-test'))
    internalServerClasspath(project(path: ':geoclient-service', configuration: 'internalServer'))
}

tasks.named('asciidoctor') {
    group 'documentation'
    description 'Build Asciidoctor documentation'

    baseDirFollowsSourceDir()

    sourceDir file('src/docs/asciidoc')

    sources {
        include 'index.adoc'
    }

    resources {
        from(sourceDir) {
            include 'images/**', 'js/**'
        }
    }

    attributes docinfo: 'shared',
               idprefix: '',
               idseparator: '-',
               imagesdir: './images',
               sectanchors: true,
               sectlinks: true,
               sectnums: '',
               toc: 'left',
               toclevels: 2,
               'docinfo1': '',
               'source-highlighter': 'rouge',
               'rouge-style': 'monokai'

    // Temporary workaround for https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/599
    inputs.dir(sourceDir).withPropertyName("sourceDir").withPathSensitivity(PathSensitivity.RELATIVE)

    jvm {
        // To avoid warning, see https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/597
        jvmArgs(
            "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",
            "--add-opens", "java.base/java.io=ALL-UNNAMED"
        )
    }

    notCompatibleWithConfigurationCache("https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/564")
}

// java.io.File
def bootJarFile = project.configurations.internalServerClasspath.resolvedConfiguration.getFiles().toArray()[0]

//tasks.register('startService', Exec) {
//    commandLine '/bin/bash', '-c', "java -jar ${bootJarFile} --spring.profiles.active=docsamples &"
//}

tasks.register('startService', JavaExec) {
   classpath = files(bootJarFile)
   args '--spring.profiles.active=docsamples'
}

tasks.register('stopService', Exec) {
    commandLine '/bin/bash', '-c', '/usr/bin/curl -X POST http://localhost:8080/geoclient/v2/actuator/shutdown'
}

def generatedSamplesDir = Paths.get(layout.buildDirectory.dir('samples').get().getAsFile().getPath())

tasks.register('ensureSamplesDir') {
    //def generatedSamplesDir = Paths.get(tasks.named('asciidoctor').get().getOutputs().getFiles().getAsPath(),'samples')
    doLast {
        Files.createDirectories(generatedSamplesDir)
    }
}

tasks.named('test', Test) {
    dependsOn('ensureSamplesDir')
    ext.defaultBaseUrl = 'http://localhost:8080/geoclient/v2'
    ext.defaultOutputDir = generatedSamplesDir
    environment('GENERATOR_BASEURL', System.getenv('GENERATOR_BASEURL') ?: ext.defaultBaseUrl)
    environment('GENERATOR_OUTPUTDIR', System.getenv('GENERATOR_OUTPUTDIR') ?: ext.defaultOutputDir)

    testLogging {
        showStandardStreams = true
    }
}

tasks.named('integrationTest', Test) {
    dependsOn('ensureSamplesDir')
    //dependsOn('startService')
    //finalizedBy('stopService')
    ext.defaultBaseUrl = 'http://localhost:8080/geoclient/v2'
    ext.defaultOutputDir = generatedSamplesDir
    environment('GENERATOR_BASEURL', System.getenv('GENERATOR_BASEURL') ?: ext.defaultBaseUrl)
    environment('GENERATOR_OUTPUTDIR', System.getenv('GENERATOR_OUTPUTDIR') ?: ext.defaultOutputDir)

    environment('GEOCLIENT_SERVICE_STATUS', System.getenv('GEOCLIENT_SERVICE_STATUS'))
    systemProperties(['geoclient.service.status': System.getProperty('geoclient.service.status', '')])

    testLogging {
        showStandardStreams = true
    }
}