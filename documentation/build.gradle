import java.nio.file.*
import java.net.URI

plugins {
    id 'geoclient.library-conventions'
    id 'geoclient.test-conventions'
	alias(libs.plugins.asciidoctorConvert)
	alias(libs.plugins.asciidoctorPdf)
}

dependencies {
    implementation(libs.httpclient)
    implementation('org.springframework.boot:spring-boot-starter-web')
}

tasks.named('asciidoctor') {
    group 'documentation'
    description 'Build Asciidoctor documentation'

    baseDirFollowsSourceDir()

    sourceDir file('src/docs/asciidoc')

    sources {
        include 'index.adoc'
    }

    resources {
        from(sourceDir) {
            include 'images/**', 'js/**'
        }
    }

    attributes docinfo: 'shared',
               idprefix: '',
               idseparator: '-',
               imagesdir: './images',
               sectanchors: true,
               sectlinks: true,
               sectnums: '',
               toc: 'left',
               toclevels: 2,
               'docinfo1': '',
               'source-highlighter': 'rouge',
               'rouge-style': 'monokai'

    // Temporary workaround for https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/599
    inputs.dir(sourceDir).withPropertyName("sourceDir").withPathSensitivity(PathSensitivity.RELATIVE)

    jvm {
        // To avoid warning, see https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/597
        jvmArgs(
            "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",
            "--add-opens", "java.base/java.io=ALL-UNNAMED"
        )
    }

    notCompatibleWithConfigurationCache("https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/564")
    //doLast {
    //    println("Hello my name is ${name}.")
    //    println("I'm in the ${getClass()} class.")
    //}
}

//project.ext.docOutputDir = null
//
//tasks.named('asciidoctor') { tprovider ->
//    println("tprovider.class = ${tprovider.class}")
//    def t = tprovider.get()
//    println("t.class = ${t.class}")
//    ext.docOutputDir = t.getOutputs().getFiles().getAsPath()
//    println("task output path: ${ext.docOutputDir}")
//}

tasks.register('ioCheck', Task) {
    doLast {
        File file = layout.projectDirectory.getAsFile()
        //println("File: ${file}")
        String fileString = file.getPath()
        //println("File.getPath() -> String: ${fileString}")
        URI fileUri = file.toURI()
        Path projectPath = Paths.get(fileUri)
        //println("projectPath: ${projectPath}")
        URI buildDirUri = layout.buildDirectory.getAsFile().get().toURI()
        Path buildPath = Paths.get(buildDirUri)
        println("asciidoctor.outputs: ${tasks.named('asciidoctor').get().getOutputs().getFiles().getAsPath()}")
        //println("buildPath: ${buildPath}")
        //println("projectPath.resolve(buildPath): ${projectPath.resolve(buildPath)}")
        //println("buildPath.resolve(projectPath): ${buildPath.resolve(projectPath)}")
        //println("projectPath.relativize(buildPath): ${projectPath.relativize(buildPath)}")
        //println("buildPath.relativize(projectPath): ${buildPath.relativize(projectPath)}")
        //println("asciidoctor task output path: ${ext.docOutputDir}")
    }
}

tasks.named('integrationTest', Test) {
    ext.defaultBaseUrl = "http://localhost:8080/geoclient/v2"
    ext.defaultOutputDir = Paths.get(tasks.named('asciidoctor').get().getOutputs().getFiles().getAsPath(),'samples')
    // Environment variable names must match constants set in
    // gov.nyc.doitt.gis.geoclient.docs.GeneratorConfigurationTests.java
    environment('GENERATOR_BASEURL', System.getenv('GENERATOR_BASEURL') ?: ext.defaultBaseUrl)
        environment('GENERATOR_OUTPUTDIR', System.getenv('GENERATOR_OUTPUTDIR') ?: ext.defaultOutputDir)
}