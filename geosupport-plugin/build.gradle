plugins {
    id 'checkstyle'
    id 'groovy'
    id 'java-gradle-plugin'
    //id 'maven-publish'
    //id 'com.gradle.plugin-publish' version '1.2.1'
    id 'com.diffplug.spotless' version '6.22.0'
}

//
// NOTE:
// Use of maven-publish or publish-publish plugins above may prevent the
// main geoclient build from properly resolving this project via includeBuild
// in the geoclient settings.gradle file's pluginManagement block.
//
// See ../settings.gradle
// See https://docs.gradle.org/current/userguide/composite_builds.html#included_build_substitution_limitations
//

repositories {
    gradlePluginPortal()
}

sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    functionalTestImplementation.extendsFrom implementation
    functionalTestRuntimeOnly.extendsFrom runtimeOnly
}

def functionalTestTask = tasks.register('functionalTest', Test) {
    group = 'verification'
    description 'Runs functional tests for the GeosupportIntegrationTestPlugin.'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        info {
            events "failed", "skipped", "passed"
            showStandardStreams = true
        }
    }
}

tasks.named("check") {
    dependsOn functionalTestTask
}

gradlePlugin {
    testSourceSets sourceSets.functionalTest

    website = 'https://github.com/mlipper/geoclient'
    vcsUrl = 'https://github.com/mlipper/geoclient'
    plugins {
        geosupportPlugin {
            id = 'com.digitalclash.geoclient.gradle.geosupport'
            implementationClass = 'com.digitalclash.geoclient.gradle.GeosupportPlugin'
            displayName = 'Geosupport plugin'
            description = 'Gradle plugin allowing JVM-based projects to configure and validate Geosupport environment.'
            tags.set(['geoclient', 'geosupport', 'geocoding', 'nyc', 'jni'])
        }
        geosupportIntegrationTestPlugin {
            id = 'com.digitalclash.geoclient.gradle.geosupport-integration-test'
            implementationClass = 'com.digitalclash.geoclient.gradle.GeosupportIntegrationTestPlugin'
            displayName = 'Geosupport integration test plugin'
            description = 'Gradle plugin that adds the ability to declare and configure JVM integration tests which use JNI to call Geosupport functions.'
            tags.set(['geoclient', 'geosupport', 'testing', 'integration testing', 'geocoding', 'nyc', 'jni'])
        }
    }
}

dependencies {
    //
    // This config is based on the Gradle documentation 'Testing Plugins',
    // section 'Configuring a test framework':
    // https://docs.gradle.org/current/userguide/testing_gradle_plugins.html
    //
    testImplementation platform("org.spockframework:spock-bom:2.2-groovy-3.0")
    testImplementation('org.spockframework:spock-core') {
        exclude group: 'org.codehaus.groovy'
    }
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'net.bytebuddy:byte-buddy:1.14.9'

    //
    // This config is based on the Gradle documentation 'Testing Build Logic with TestKit',
    // section 'Example: Automatically injecting the code under test classes into test builds':
    // https://docs.gradle.org/current/userguide/test_kit.html#example_automatically_injecting_the_code_under_test_classes_into_test_builds
    //
    functionalTestImplementation platform("org.spockframework:spock-bom:2.2-groovy-3.0")
    functionalTestImplementation('org.spockframework:spock-core') {
        exclude group: 'org.codehaus.groovy'
    }
    functionalTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

javadoc {
    description = 'Generates project-level javadoc for use in -javadoc jar'
    options.addStringOption('Xdoclint:none', '-quiet')
    options.author = true
    options.encoding = 'UTF-8'
    options.header = project.name
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.noTimestamp = true
    options.use = true
    //logging.captureStandardError LogLevel.INFO
    //logging.captureStandardOutput LogLevel.INFO
}

//publishing {
//    repositories {
//        maven {
//            name = 'localPlugins'
//            url = '../local-plugins'
//        }
//    }
//}

spotless {
    ratchetFrom 'origin/main'
    format 'misc', {
            target '*.gradle', '*.md', '.gitignore'
            endWithNewline()
            indentWithSpaces()
            trimTrailingWhitespace()
    }
    java {
        endWithNewline()
        //eclipse()
        importOrderFile(rootProject.file('src/spotless/eclipse.importorder'))
        indentWithSpaces()
        licenseHeaderFile(rootProject.file('src/spotless/apache-license-2.0.java'))
        toggleOffOn()
        trimTrailingWhitespace()
    }
}

task printSourceSets(){

    doLast{
        sourceSets.each { srcSet ->
            println "[${srcSet.name}]"
            println " - source dirs:"
            srcSet.allSource.srcDirs.each {
                println "     ${it.path}"
            }
            println " - output dirs:"
            srcSet.output.classesDirs.files.each {
                println "     ${it.path}"
            }
            //println "-->Compile classpath:"
            //srcSet.compileClasspath.files.each {
            //    println "  ${it.path}"
            //}
            println ""
        }
    }
}
