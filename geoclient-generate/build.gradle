import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'base'

//logging.captureStandardOutput LogLevel.LIFECYCLE
//logging.captureStandardError LogLevel.LIFECYCLE

ext {
  generatedComment = '/* !---- DO NOT EDIT: This file autogenerated by '
  gluegenCfgSourceFile  = "$projectDir/src/main/resources/gluegen.cfg"
  gluegenCfgExecDir = "$buildDir/resources/main"
  tempJavaOutputDir   = file("$buildDir/temp/java")
  tempNativeOutputDir = file("$buildDir/temp/c")
}

configurations {
  execGluegen
}

dependencies {
  execGluegen "org.jogamp.gluegen:gluegen:$gluegenVersion", "antlr:antlr:$antlrVersion"
}

task prepareConf (type: Copy) {
  description = 'Prepares the Gluegen config file'


  from gluegenCfgSourceFile
  into gluegenCfgExecDir

  // NOTE: new in 2.14.
  // Insure encoding
  // filteringCharset = 'UTF-8'

  // Remove CRLF line terminators
  filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'),
                        tab: FixCrLfFilter.AddAsisRemove.newInstance('asis'),
                        eof: FixCrLfFilter.AddAsisRemove.newInstance('remove'),
                    fixlast: true)

  // Replace tokens in Gluegen config source file
  filter(ReplaceTokens, tokens: [
                              javaOutputDir: tempJavaOutputDir.toString(),
                              nativeOutputDir: tempNativeOutputDir.toString(),
                              jniLibName: 'geoclientjni'])

  doFirst {
    mkdir gluegenCfgExecDir
  }
}

task generateSource () {
  description 'Generates *.java, *.c JNI files using the Gluegen Ant Task'

  ext.targetHeaderFile = "${rootDir}/geoclient-native/src/main/headers/geoclient.h"
  inputs.files prepareConf
  inputs.file targetHeaderFile
  outputs.dir tempJavaOutputDir
  outputs.dir tempNativeOutputDir

  doFirst {
    mkdir tempJavaOutputDir
    mkdir tempNativeOutputDir
  }

  doLast {
    // IMPORTANT: Gluegen's PCPP does not evaluate macros and geoclient.h
    // uses macros to include either NYCgeo.h or geo.h. If this task complains
    // complains about missing header files, make sure the platform include
    // directory contains both
    ant.taskdef(name: 'gluegen', classname: 'com.jogamp.gluegen.ant.GlueGenTask', classpath: "${configurations.execGluegen.asPath}")
    ant.gluegen(
                src: targetHeaderFile,
             config: "${gluegenCfgExecDir}/gluegen.cfg",
     literalInclude: "${gsIncludePath}",
            emitter: 'com.jogamp.gluegen.JavaEmitter',
              debug: false) {
        ant.classpath(path: "${configurations.execGluegen.asPath}")
    }
  }

}

task generateJavaSource(type: Copy, dependsOn: generateSource) {
  description = 'Generate JNI Java source files'
  from tempJavaOutputDir
  into "$buildDir/generated-source/java"

  eachFile { fileCopyDetails ->
    // Comment out unused Java imports and remove timestamp
    delegate.filter { String line ->
      if (line.startsWith(generatedComment)) {
        adjustComment(line)
      } else if(line.startsWith('import com.jogamp')) {
        adjustImport(fileCopyDetails.name, line)
      } else {
        line
      }
    }
  }
  // NOTE: new in 2.14
  // Insure encoding
  // filteringCharset = 'UTF-8'
  // Remove CRLF line terminators
  filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'),
                        tab: FixCrLfFilter.AddAsisRemove.newInstance('asis'),
                        eof: FixCrLfFilter.AddAsisRemove.newInstance('remove'),
                    fixlast: true)
}

task generateNativeSource(type: Copy, dependsOn: generateSource) {
  description = 'Generate JNI C source files'
  from tempNativeOutputDir
  into "$buildDir/generated-source/c"
  // Filter timestamp
  filter { String line ->
    line.startsWith(generatedComment) ? adjustComment(line) : line
  }
  // NOTE: new in 2.14
  // Insure encoding
  // filteringCharset = 'UTF-8'
  // Remove CRLF line terminators
  filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'),
                        tab: FixCrLfFilter.AddAsisRemove.newInstance('asis'),
                        eof: FixCrLfFilter.AddAsisRemove.newInstance('remove'),
                    fixlast: true)
}

String adjustComment(String line) {
  '/* !---- DO NOT EDIT: This file autogenerated by Gluegen ----! */'
}

String adjustImport(String fileName, String line) {
    def result = line
    switch ( line ) {
      case 'import com.jogamp.gluegen.runtime.*;':
        result = '// import com.jogamp.gluegen.runtime.*;'
        break
      case 'import com.jogamp.common.os.*;':
        result = '// import com.jogamp.common.os.*;'
        break
      case { it == 'import com.jogamp.common.nio.*;' && fileName == 'Geoclient.java' }:
        result = '// import com.jogamp.common.nio.*;'
        break
      case 'import com.jogamp.common.nio.*;':
        result = 'import com.jogamp.common.nio.Buffers;'
        break
      default:
        result
    }
  result
}
