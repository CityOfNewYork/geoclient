import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

// TODO How to reference native subproject file/directory paths using
// component, sourceSet, etc. reference? 
// TODO Make me a Plugin! (*Poof*! You're a plugin!)
dependencies {
  compile(configurations.execGluegen)
}

processResources {
  description = 'Prepares the Gluegen config file'
  group 'Code Generation'

  ext.javaOutputDir   = "$buildDir/generated/java"
  ext.nativeOutputDir = "$buildDir/generated/c"

  outputs.dir nativeOutputDir
  outputs.dir javaOutputDir

  expand(nativeOutputDir: nativeOutputDir, javaOutputDir: javaOutputDir)
  filter(FixCrLfFilter)
}

task generateSource (type: JavaExec, dependsOn: processResources) {
  description 'Generates *.java, *.c JNI files using Gluegen'
  group 'Code Generation'

  ext.gluegenConfigFile = "$buildDir/resources/main/gluegen.cfg"
  ext.geoclientHeader = "${project(':geoclient-native').projectDir}/src/main/headers/geoclient.h"

  inputs.file gluegenConfigFile
  inputs.file geoclientHeader
  outputs.dir processResources.nativeOutputDir
  outputs.dir processResources.javaOutputDir

  classpath = files(configurations.runtime.files)
  main      = 'com.jogamp.gluegen.GlueGen'
  executable = "${jniJavaHome}/bin/java"
  // IMPORTANT: Gluegen's PCPP does not evaluate macros and geoclient.h
  // uses macros to include either NYCgeo.h or geo.h. If this task complains
  // complains about missing header files, make sure the platform include
  // directory contains both
  args "-I${gsIncludePath}"
  args '-Ecom.jogamp.gluegen.JavaEmitter'
  args "-C${gluegenConfigFile}"
  args "${geoclientHeader}"
  doFirst { logger.info "** Generating C and Java source files for JNI **" }
}

task refreshGeneratedNativeSource(type: Copy, dependsOn: generateSource) {
  description = 'Create/overwrite generated C source files in :geoclient-native'
  group 'Code Generation'

  ext.targetNativeSourceDir = "${project(':geoclient-native').projectDir}/src/generated/c"
  ext.targetJavaSourceDir = "${project(':geoclient-jni').projectDir}/src/generated/java"

  inputs.dir  processResources.nativeOutputDir
  outputs.dir targetNativeSourceDir

  from(processResources.nativeOutputDir)
  into(targetNativeSourceDir)
  rename 'GeoclientImpl_JNI.c', 'geoclient_jni.c'
}

task refreshGeneratedJavaSource(type: Copy, dependsOn: generateSource) {
  description = 'Create/overwrite generated Java source files in :geoclient-jni'
  group 'Code Generation'

  inputs.dir  processResources.javaOutputDir
  outputs.dir refreshGeneratedNativeSource.targetJavaSourceDir

  from(processResources.javaOutputDir)
  into(refreshGeneratedNativeSource.targetJavaSourceDir)
}

task refreshGeneratedSource(dependsOn: ['refreshGeneratedJavaSource', 'refreshGeneratedNativeSource']) {
  description = 'Create/overwrite generated C and Java source files in other subprojects'
  group 'Code Generation'

  outputs.files refreshGeneratedJavaSource.outputs.files, refreshGeneratedNativeSource.outputs.files
}

classes.dependsOn(refreshGeneratedSource)

clean {
  delete refreshGeneratedSource.outputs.files
}
