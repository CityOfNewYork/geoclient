buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "org.jogamp.gluegen:gluegen:${gluegenVersion}", "antlr:antlr:${antlrVersion}"
    classpath "com.github.ben-manes:gradle-versions-plugin:0.15.0"
    classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.2.0'
  }
}
apply plugin: 'com.github.ben-manes.versions'
ext.gradleScriptDir = "${rootProject.projectDir}/gradle"

apply plugin: 'base'
apply from: "${gradleScriptDir}/env.gradle"

allprojects { p ->
  group = rootProject.group
  version = rootProject.version

  repositories {
    // geotoolkit repo must be before mavenCentral which has the pom, javadoc
    // but not the binary jar
    maven { url "http://maven.geotoolkit.org/" }
    mavenCentral()
    jcenter()
    mavenLocal()
    maven { url "http://repo.boundlessgeo.com/main/" }
  }

  apply from: "${gradleScriptDir}/dependencies.gradle"
  apply from: "${gradleScriptDir}/ide.gradle"
  apply from: "${gradleScriptDir}/utils.gradle"
  apply from: "${gradleScriptDir}/publish-maven.gradle"

} //allprojects

def javaPluginProjects = [
  project(':geoclient-jni'),
  project(':geoclient-core'),
  project(':geoclient-parser'),
  project(':geoclient-search'),
  project(':geoclient-service')
] as Set

configure(javaPluginProjects) { p ->
  // The Java build was originally adapted from the spring-framework's Gradle
  // build
  apply plugin: 'java'

  ext.javadocLinks = [
          "http://docs.oracle.com/javase/8/docs/api/",
          "http://docs.oracle.com/javaee/7/api/"
  ] as String[]

  test {
    // Variables set in gradle/env.gradle
    systemProperty "java.library.path", testJavaLibraryPath
    environment "GEOFILES", gsGeofiles
    environment testSystemLibraryPath.varname, testSystemLibraryPath.value
  }

  // Once the Gluegen 2.3.x annotation warnings to stderr are fixed then
  // add "-Werror" to the List.
  // See https://jogamp.org/bugzilla/show_bug.cgi?id=1256
  compileJava.options*.compilerArgs = [
      "-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
      "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
      "-Xlint:overrides", "-Xlint:path", "-Xlint:-processing", "-Xlint:static",
      "-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
      "-Xlint:unchecked", "-Xlint:-options"]

  compileTestJava.options*.compilerArgs = [
      "-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
      "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
      "-Xlint:overrides", "-Xlint:path", "-Xlint:-processing", "-Xlint:static",
      "-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
      "-Xlint:-unchecked", "-Xlint:-options"]

  compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    options.encoding = 'UTF-8'
  }

  compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
  }

  dependencies {

    testCompile("junit:junit:${junitVersion}") {
      exclude group:'org.hamcrest', module:'hamcrest-core'
    }

    testCompile("org.mockito:mockito-all:${mockitoVersion}") {
      exclude group:'org.hamcrest', module:'hamcrest-core'
    }

    testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")

    testCompile("org.assertj:assertj-core:${assertJVersion}")
  }

  jar {
    manifest {
      attributes(
        'Implementation-Title': p.name,
        'Implementation-Version': p.version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
      )
    }

    from("${rootProject.projectDir}/src/dist") {
      include "LICENSE.txt"
      include "NOTICE.txt"
      into "META-INF"
      expand(copyright: new Date().format("yyyy"), version: p.version)
    }
  }

  javadoc {
    description = "Generates javadoc for Java projects for use with -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    //options.links(javadocLinks)
    //options.quiet()
    options.verbose()
    // Suppress cross-module @see and @link reference warnings
    logging.captureStandardError LogLevel.INFO
    // suppress "## warnings"
    logging.captureStandardOutput LogLevel.INFO
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  configurations {
    all*.exclude group: "commons-logging", module: "commons-logging"
  }

  apply from: "${gradleScriptDir}/sniff.gradle"

} // javaPluginProjects
