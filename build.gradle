import gov.nyc.doitt.gis.gradle.gluegen.GluegenExecTask
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  repositories {
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1"
    classpath "com.github.ben-manes:gradle-versions-plugin:0.12.0"
  }
}

ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
ext.gluegenClasspath = null

apply from: "${gradleScriptDir}/env.gradle"

allprojects {
  group = rootProject.group
  version = rootProject.version
  
  repositories {
    jcenter()
  }

  apply from: "${gradleScriptDir}/dependencies.gradle"
  apply from: "${gradleScriptDir}/license.gradle"
  apply from: "${gradleScriptDir}/ide.gradle"
  apply plugin: 'maven-publish'
  apply plugin: "com.github.ben-manes.versions"
  
  ext.javadocLinks = [
          "http://docs.oracle.com/javase/8/docs/api/",
          "http://docs.oracle.com/javaee/7/api/"
  ] as String[]

  configurations {
    all*.exclude group: "commons-logging", module: "commons-logging"
  }

  publishing {
    repositories {
      maven {
        name 'mavenJava'
        url "${rootProject.buildDir}/repo"
      }
      ivy {
        name 'ivyNative'
        url "${rootProject.buildDir}/lib"
      }
    }
  }

} //allprojects

def javaPluginProjects = [
      project(':geoclient-generate'),
      project(':geoclient-jni'),
      project(':geoclient-core'),
      project(':geoclient-parser'),
      project(':geoclient-service'),
      //project(':geoclient-batch')
] as Set

configure(javaPluginProjects) { p ->

  apply plugin: 'java'

  if(p != project(':geoclient-generate') && p != project(':geoclient-jni')) {
    test {
      // Variables set in gradle/env.gradle
      environment "GEOFILES", gsGeofiles
      systemProperty "java.library.path", testJavaLibraryPath
    }
  }

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  compileJava {
    options.encoding = 'utf-8'
  }

  dependencies {
    testCompile("junit:junit:${junitVersion}") {
      exclude group:'org.hamcrest', module:'hamcrest-core'
    }
    testCompile("org.mockito:mockito-all:${mockitoVersion}") {
      exclude group:'org.hamcrest', module:'hamcrest-core'
    }
    testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")
  }

  jar {
    manifest {
      attributes(
        'Implementation-Title': p.name,
        'Implementation-Version': p.version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
      )
    }

    from("${rootProject.projectDir}/src/dist") {
      include "LICENSE.txt"
      include "NOTICE.txt"
      into "META-INF"
      expand(copyright: new Date().format("yyyy"), version: p.version)
    }
  }

  javadoc {
    description = "Generates javadoc for Java projects for use with -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    //options.links(javadocLinks)
    options.quiet()
    // Suppress cross-module @see and @link reference warnings
    logging.captureStandardError LogLevel.INFO
    // suppress "## warnings"
    logging.captureStandardOutput LogLevel.INFO
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar {
          classifier "sources"
        }
        artifact javadocJar {
          classifier "javadoc"
        }
      }
    }
  }

} // javaPluginProjects

def gluegenProjects = [
      project('geoclient-generate'),
      project('geoclient-jni')
] as Set

configure(gluegenProjects) {
  configurations {
    execGluegen
    jniRuntime
  }
  dependencies {
    execGluegen "org.jogamp.gluegen:gluegen:$gluegenVersion", "antlr:antlr:$antlrVersion"
    jniRuntime(configurations.execGluegen) {
      exlude(module: "antlr")
    }
  }
//  tasks.create(name: "generateJni", type: GluegenExecTask) {
//
//    ext.generatedNativeDir = file("${rootDir}/geoclient-native/build/src/generated/c")
//    ext.geoclientHeader = file("${rootDir}/geoclient-native/src/main/headers/geoclient.h")
//    ext.generatedJavaDir = file("${rootDir}/geoclient-jni/build/src/generated/java")
//    ext.gluegenRuntimeDir = file("${project.buildDir}/gluegen")
//    // Required for use of generatedBy with CSourceSet
//    sourceDir = project.name == "geoclient-native" ? generatedNativeDir : generatedJavaDir
//    headerDir = generatedNativeDir // Note: no headers are generated in this case
//    // Required by GluegenExecTask and Gluegen itself
//    configurationFile = file("${gluegenRuntimeDir}/gluegen.cfg")
//    nativeHeader = file("${gluegenRuntimeDir}/geoclient.h")
//    includePath = files(project.gsIncludePath)
//    javaOutputDir = generatedJavaDir
//    nativeOutputDir = generatedNativeDir
//
//    classpath = files(configurations.execGluegen.files)
//
//    doFirst() {
//      if(!gluegenRuntimeDir.exists()) {
//        println "DUH!"
//        gluegenRuntimeDir.mkdirs()
//      }
//      if(!configurationFile.parentFile.exists()) {
//        configurationFile.parentFile.mkdirs()
//      }
//      project.copy {
//        from file("${rootDir}/geoclient-generate/src/main/resources/gluegen.cfg")
//        into gluegenRuntimeDir
//        expand(
//          nativeOutputDir: nativeOutputDir,
//          javaOutputDir: javaOutputDir)
//        filter(FixCrLfFilter)
//      }
//      project.copy {
//        from geoclientHeader
//        into nativeHeader.parentFile
//      }
//    }
//    doLast() {
//      new File(nativeOutputDir, "GeoclientImpl_JNI.c").renameTo(
//                new File(nativeOutputDir, "geoclient_jni.c").canonicalPath)
//    }
//  }
}

