apply from: "${rootDir}/gradle/dependencies.gradle"

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'project-report'
    apply plugin: 'gov.nyc.doitt.gis.geoclient.gradle.geoclient-plugin'

    //geosupport {
    //    home = "${System.getenv('GEOSUPPORT_HOME')}"
    //    libraryPath = "${System.getenv('GEOSUPPORT_HOME')}/lib"
    //    geofiles = "${System.getenv('GEOFILES')}"
    //}
    geoclient {
        nativeTempDir = project.file("${project.buildDir}/temp/native")
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
        maven { url "http://maven.geotoolkit.org/" }
        mavenCentral()
        maven { url "http://repo.boundlessgeo.com/main/" }
    }

    dependencies {
        implementation enforcedPlatform('org.springframework.boot:spring-boot-dependencies:2.1.1.RELEASE')
        implementation 'org.springframework.boot:spring-boot-starter-logging'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit', module: 'junit'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    def commonCompilerArgs =
            ["-Xlint:serial", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann",
             "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides",
             "-Xlint:path", "-Xlint:processing", "-Xlint:static", "-Xlint:try", "-Xlint:-options"]

    compileJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:varargs", "-Xlint:fallthrough", "-Xlint:rawtypes",
             "-Xlint:deprecation", "-Xlint:unchecked", "-Werror"]

    compileTestJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:-varargs", "-Xlint:-fallthrough", "-Xlint:-rawtypes",
             "-Xlint:-deprecation", "-Xlint:-unchecked"]

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    ext {
        enableJavadoc = project.hasProperty('nojdoc') ? false : true
        localLibsDir = new File(rootProject.buildDir, 'libs')
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }

    javadoc {
        options {
            memberLevel = JavadocMemberLevel.PROTECTED
            author = true
            header = project.name
            use = true
            encoding = 'UTF-8'
            noTimestamp = true
        }
    }

    tasks.withType(Javadoc).all { enabled = project.ext.enableJavadoc }

    jar {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
            )
        }

        from("${rootProject.projectDir}/src/dist") {
            include 'LICENSE.txt'
            include 'NOTICE.txt'
            into 'META-INF'
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        repositories {
            maven {
                name = 'localBuild'
                url = "file://${rootProject.buildDir}/repo"
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/CityOfNewYork/geoclient'
                    inceptionYear = '2013'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    organization {
                        name = 'City of New York / DoITT / Citywide GIS'
                        url = 'https://maps.nyc.gov'
                    }
                    developers {
                        developer {
                            id = 'mlipper'
                            name = 'Matthew Lipper'
                            email = 'mlipper@doitt.nyc.gov'
                        }
                    }
                    scm {
                        connection = 'scm:https://git@github.com/CityOfNewYork/geoclient.git'
                        developerConnection = 'scm:git://github.com/CityOfNewYork/geoclient.git'
                        url = 'https://maps.nyc.gov/geoclient/v1/doc'
                    }

                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/CityOfNewYork/geoclient/issues'
                    }

                } // pom
            } // mavenJava(MavenPublication)
        } //publications
    } // publishing

    signing { sign publishing.publications.mavenJava }

} // allprojects
