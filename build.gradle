plugins {
    id "gov.nyc.doitt.gis.geoclient.gradle.integration-test" apply false
    id "com.github.ben-manes.versions" version "0.27.0"
}

ext {
    moduleProjects = subprojects.findAll { it.name.startsWith("geoclient-") }
    jarPublishProjects = moduleProjects - project(":geoclient-service")
    springBootProject = project(":geoclient-service")
}

configure(moduleProjects){ project ->

    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/publications.gradle"

    // Java dependency configuration
    repositories {
        //maven { url "https://nexus.geomatys.com/repository/geotoolkit/" }
        mavenCentral()
        maven { url "https://repo.osgeo.org/repository/geotools-releases/" }
        //maven { url "https://repo.boundlessgeo.com/main/" }
    }

    ext{

        commonsTextVersion        = "1.8"
        diffutilsVersion          = "1.3.0"
        // Sync version with geoclient-service/src/main/resources/META-INF/spring-devtools.properties
        dozerVersion              = "6.5.0"
        geotoolsVersion           = "23.0"
        httpclient                = "4.5.10"
        thymeleafVersion          = "3.0.11.RELEASE"
        xstreamVersion            = "1.4.11.1"

        licenseFilesSpec = copySpec {
            from("${rootDir}/src/dist") {
                include "license.txt"
                include "notice.txt"
                into "META-INF"
                expand(copyright: new Date().format("yyyy"), version: project.version)
            }
        }
    }

    dependencies {
        // TODO switch back to new Gradle BOM support when spring-boot gradle-plugin can work correctly
        implementation enforcedPlatform("org.springframework.boot:spring-boot-dependencies:2.2.2.RELEASE") // Must be in sync with rootProject plugin block above
                                                                                                           // and geoclient-service/build.gradle
        implementation "org.springframework.boot:spring-boot-starter-logging"
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "org.junit", module: "junit"
        }
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    }

    // Java build configuration
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    normalization {
        runtimeClasspath {
            ignore "META-INF/MANIFEST.MF"
        }
    }

    // Test Java configuration
    apply plugin: "gov.nyc.doitt.gis.geoclient.gradle.integration-test"

    integrationTest {
        useJUnitPlatform()
        testLogging {
            displayGranularity = 2
            events "failed", "skipped", "passed"
            exceptionFormat "full"
            showStandardStreams = false
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            displayGranularity = 2
            events "failed", "skipped", "passed"
            exceptionFormat "full"
            showStandardStreams = false
        }
    }

    // Javadoc configuration
    ext {
        javadocLinks = [
            "https://docs.oracle.com/javase/8/docs/api/",
            "https://fasterxml.github.io/jackson-core/javadoc/2.10/",
            "https://fasterxml.github.io/jackson-databind/javadoc/2.10/",
            "https://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.10/",
            "https://junit.org/junit5/docs/5.5.2/api/"
        ] as String[]
    }

    javadoc {
        description = "Generates project-level javadoc for use in -javadoc jar"

        options.memberLevel = JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
        options.use = true
        options.encoding = "UTF-8"
        options.noTimestamp = true
        // TODO debug slowness when uncommented: network, parse, etc...
        //options.links(project.ext.javadocLinks)
        options.addStringOption("Xdoclint:none", "-quiet")

        // Suppress warnings due to cross-module @see and @link references.
        // Note that global "api" task does display all warnings.
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
    }

    // Shared manifest configuration for jar and bootJar tasks
    ext.sharedManifest = manifest {
           attributes(
               "Implementation-Title": project.name,
               "Implementation-Version": project.version,
               "Automatic-Module-Name": project.name.replace("-", "."),  // for Jigsaw
               "Built-By": "${System.getProperty("user.name")}",
               "Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
               "Built-Gradle": gradle.gradleVersion)
    }
}

//
// Jar packaging & publishing of modules except for :geoclient-service:bootJar 
// 
configure(jarPublishProjects) { project ->

    jar {
        manifest {
            from project.sharedManifest
        }
        with(project.licenseFilesSpec)
    }

    publishing {
        publications {
            mavenJava {
                from components.java
            }
        }
    }
    signing {
        sign publishing.publications.mavenJava
    }
}

configure(moduleProjects) { project ->
    afterEvaluate {
        project.task("publications") {
            group = "Help"
            description "Lists all module project publications."
            doLast {
                publishing.publications.each {
                    logger.quiet("[{}] {}:{}", it.name, it.artifactId, it.version)
                    it.artifacts.each { a ->
                        String padding = " ".multiply(it.name.length() - a.extension.length())
                        logger.quiet("{}[{}] {}", padding, a.extension, a.file.absolutePath)
                    }
                }
            }
        }
    }
}

allprojects {
    apply from: "${rootDir}/gradle/ide.gradle"
}
