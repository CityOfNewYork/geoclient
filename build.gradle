// spring-javaformat-gradle-plugin:
//  buildscript {
//      repositories {
//          mavenCentral()
//      }
//      dependencies {
//          classpath('io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.6')
//      }
//  }
plugins { id 'org.springframework.boot' version '2.1.1.RELEASE' apply false }

repositories { mavenCentral() }

apply from: "${rootDir}/gradle/dependencies.gradle"

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'project-report'
}

subprojects {

    apply plugin: 'java'
    //apply plugin: 'checkstyle'
    apply plugin: 'io.spring.dependency-management'
    //apply plugin: 'io.spring.javaformat'

    //checkstyle {
    //    toolVersion = "${checkstyleVersion}"
    //}

    repositories { mavenCentral() }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.junit:junit-bom:${junitJupiterBomVersion}"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-logging'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit', module: 'junit'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        //checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${springJavaformatCheckstyleVersion}"
    }

    compileJava.options*.compilerArgs = [
        '-Xlint:serial',
        '-Xlint:varargs',
        '-Xlint:cast',
        '-Xlint:classfile',
        '-Xlint:dep-ann',
        '-Xlint:divzero',
        '-Xlint:empty',
        '-Xlint:finally',
        '-Xlint:overrides',
        '-Xlint:path',
        '-Xlint:-processing',
        '-Xlint:static',
        '-Xlint:try',
        '-Xlint:fallthrough',
        '-Xlint:rawtypes',
        '-Xlint:deprecation',
        '-Xlint:unchecked',
        '-Xlint:-options',
        '-Werror'
    ]

    compileTestJava.options*.compilerArgs = [
        '-Xlint:serial',
        '-Xlint:-varargs',
        '-Xlint:cast',
        '-Xlint:classfile',
        '-Xlint:dep-ann',
        '-Xlint:divzero',
        '-Xlint:empty',
        '-Xlint:finally',
        '-Xlint:overrides',
        '-Xlint:path',
        '-Xlint:-processing',
        '-Xlint:static',
        '-Xlint:try',
        '-Xlint:-fallthrough',
        '-Xlint:-rawtypes',
        '-Xlint:-deprecation',
        '-Xlint:-unchecked',
        '-Xlint:-options'
    ]

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    ext {
        enableJavadoc = getConfigProperty('nojdoc') ? false : true
        gsIncludePath = new File(projectDir, 'lib/geosupport/headers')
        gsLibraryPath = getGeosupportLibraryDir()
        gsGeofilesPath = getGeofilesDir()
        localLibsDir = new File(rootProject.buildDir, 'libs')
    }

    test {
        useJUnitPlatform()
        // Variables set in gradle/env.gradle
        systemProperty 'java.library.path', gsLibraryPath
        // Ensure Geosupport knows where to find its data files
        environment 'GEOFILES', gsGeofilesPath
        testLogging {
            lifecycle {
                events 'PASSED', 'SKIPPED', 'FAILED'
                exceptionFormat 'short'
            }
            info {
                events 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_OUT', 'STANDARD_ERROR'
                exceptionFormat 'short'
            }
        }
    }

    javadoc {
        options {
            memberLevel = JavadocMemberLevel.PROTECTED
            author = true
            header = project.name
            use = true
            encoding = 'UTF-8'
            noTimestamp = true
        }
    }
    // Disable Javadoc if requested
    tasks.withType(Javadoc).all { enabled = project.ext.enableJavadoc }

    jar {
        manifest {
            attributes(
                            'Implementation-Title': project.name,
                            'Implementation-Version': project.version,
                            'Built-By': System.getProperty('user.name'),
                            'Built-JDK': System.getProperty('java.version'),
                            'Built-Gradle': gradle.gradleVersion
                            )
        }

        from("${rootProject.projectDir}/src/dist") {
            include 'LICENSE.txt'
            include 'NOTICE.txt'
            into 'META-INF'
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    } // jar

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        repositories {
            maven {
                name = 'localBuild'
                url = "file://${rootProject.buildDir}/repo"
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/CityOfNewYork/geoclient'
                    inceptionYear = '2013'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    organization {
                        name = 'City of New York / DoITT / Citywide GIS'
                        url = 'https://maps.nyc.gov'
                    }
                    developers {
                        developer {
                            id = 'mlipper'
                            name = 'Matthew Lipper'
                            email = 'mlipper@doitt.nyc.gov'
                        }
                    }
                    scm {
                        connection = 'scm:https://git@github.com/CityOfNewYork/geoclient.git'
                        developerConnection = 'scm:git://github.com/CityOfNewYork/geoclient.git'
                        url = 'https://maps.nyc.gov/geoclient/v1/doc'
                    }

                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/CityOfNewYork/geoclient/issues'
                    }

                } // pom
            } // mavenJava(MavenPublication)
        } //publications
    } // publishing

    signing { sign publishing.publications.mavenJava } // signing

} // allprojects

// TODO Put this in buildScript plugin
File getGeosupportLibraryDir() {
    def gsLibraryPath = getConfigProperty('gsLibraryPath')
    if(!gsLibraryPath) {
        String geosupportHome = getGeosupportHome()
        return new File("${geosupportHome}/lib")
    }
    return new File(gsLibraryPath)
}

File getGeofilesDir() {
    def gsGeofilesPath = getConfigProperty('gsGeofilesPath')
    if(!gsGeofilesPath) {
        String geosupportHome = getGeosupportHome()
        return new File("${geosupportHome}/fls/")
    }
    return new File(gsGeofilesPath)
}

String getGeosupportHome() {
    return getConfigProperty('geosupportHome') ?: System.getenv('GEOSUPPORT_HOME')
}

// https://github.com/bmuschko/gradle-docker-plugin/blob/v3.6.2/gradle/test-setup.gradle
String getConfigProperty(String key) {
    project.properties.getOrDefault(key, System.getProperty(key, System.getenv(key)))
}
