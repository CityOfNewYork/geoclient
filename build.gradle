buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.6")
    }
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'project-report'

    apply plugin: 'io.spring.javaformat'

    checkstyle {
        toolVersion = "8.11"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.6")
    }

    compileJava.options*.compilerArgs = [
        '-Xlint:serial', '-Xlint:varargs', '-Xlint:cast', '-Xlint:classfile',
        '-Xlint:dep-ann', '-Xlint:divzero', '-Xlint:empty', '-Xlint:finally',
        '-Xlint:overrides', '-Xlint:path', '-Xlint:-processing', '-Xlint:static',
        '-Xlint:try', '-Xlint:fallthrough', '-Xlint:rawtypes', '-Xlint:deprecation',
       '-Xlint:unchecked', '-Xlint:-options', '-Werror']

    compileTestJava.options*.compilerArgs = [
        '-Xlint:serial', '-Xlint:-varargs', '-Xlint:cast', '-Xlint:classfile',
        '-Xlint:dep-ann', '-Xlint:divzero', '-Xlint:empty', '-Xlint:finally',
        '-Xlint:overrides', '-Xlint:path', '-Xlint:-processing', '-Xlint:static',
        '-Xlint:try', '-Xlint:-fallthrough', '-Xlint:-rawtypes', '-Xlint:-deprecation',
        '-Xlint:-unchecked', '-Xlint:-options']

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    ext {
        enableJavadoc = getConfigProperty('nojdoc') ? false : true
        gsIncludePath = new File(projectDir, 'lib/geosupport/headers')
        gsLibraryPath = getGeosupportLibraryDir()
        gsGeofilesPath = getGeofilesDir()
        localLibsDir = new File(rootProject.buildDir, 'libs')
    }

    test {
        useJUnitPlatform()
        // Variables set in gradle/env.gradle
        systemProperty 'java.library.path', gsLibraryPath
        // Ensure Geosupport knows where to find its data files
        environment 'GEOFILES', gsGeofilesPath
    }

    dependencies {
        testCompileOnly 'junit:junit:4.12'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.1.0'
        //testImplementation 'org.assertj:assertj-core:3.11.1'
        //testImplementation('org.mockito:mockito-core:${mockitoVersion}') {
        //    exclude group:'org.hamcrest', module:'hamcrest-core'
        //}
    }

    // Disable Javadoc if requested
    tasks.withType(Javadoc).all { enabled = project.ext.enableJavadoc }

    jar {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
            )
        }

        from("${rootProject.projectDir}/src/dist") {
            include 'LICENSE.txt'
            include 'NOTICE.txt'
            into 'META-INF'
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    } // jar

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        repositories {
            maven {
              name = 'localBuild'
              url = "file://${rootProject.buildDir}/repo"
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/CityOfNewYork/geoclient'
                    inceptionYear = '2013'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    organization {
                        name = 'City of New York / DoITT / Citywide GIS'
                        url = 'https://maps.nyc.gov'
                    }
                    developers {
                        developer {
                            id = 'mlipper'
                            name = 'Matthew Lipper'
                            email = 'mlipper@doitt.nyc.gov'
                        }
                    }
                    scm {
                        connection = 'scm:https://git@github.com/CityOfNewYork/geoclient.git'
                        developerConnection = 'scm:git://github.com/CityOfNewYork/geoclient.git'
                        url = 'https://maps.nyc.gov/geoclient/v1/doc'
                    }

                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/CityOfNewYork/geoclient/issues'
                    }

                } // pom
            } // mavenJava(MavenPublication)
        } //publications
    } // publishing

    signing {
        sign publishing.publications.mavenJava
    } // signing

} // allprojects

// TODO Put this in buildScript plugin
File getGeosupportLibraryDir() {
    def gsLibraryPath = getConfigProperty('gsLibraryPath')
    if(!gsLibraryPath) {
        return new File(getGeosupportHome(), 'lib')
    }
    return new File(gsLibraryPath)
}

File getGeofilesDir() {
    def gsGeofilesPath = getConfigProperty('gsGeofilesPath')
    if(!gsGeofilesPath) {
        return new File(getGeosupportHome(), 'fls/')
    }
    return new File(gsGeofilesPath)
}

String getGeosupportHome() {
    return getConfigProperty('geosupportHome') ?: System.getenv('GEOSUPPORT_HOME')
}

// https://github.com/bmuschko/gradle-docker-plugin/blob/v3.6.2/gradle/test-setup.gradle
String getConfigProperty(String key) {
    project.properties.getOrDefault(key, System.getProperty(key, System.getenv(key)))
}
