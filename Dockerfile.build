#
# 1. Before running this image create a volume with Geosupport installed:
#
#   $ docker pull mlipper/geosupport-docker
#   ...
#   $ docker run -it --rm --mount source=vol-geosupport,target=/opt/geosupport mlipper/geosupport-docker
#
# 2. Build this image
#
#   $ docker build -t mlipper/geoclient:2-build -f Dockerfile.build .
#
# 3a. Run this image to run a clean Gradle build and then delete the container
#     once the build exits:
#
#   $ docker run -d --rm --mount source=vol-geosupport,target=/opt/geosupport  -v "$(pwd):/app" mlipper/geoclient:2-build
#
# OR
#
# 3b. Run this image interactively to invoke Gradle tasks from the
#     container's shell (override this file's default CMD). Creates a container
#     named "gcbuild":
#
#   $ docker run -it --name gcbuild -p 8080:8080 -p 5005:5005 --mount source=vol-geosupport,target=/opt/geosupport -v "$(pwd):/app" mlipper/geoclient:2-build /bin/bash -il
#
FROM openjdk:8-jdk-slim AS builder
LABEL maintainer "Matthew Lipper <mlipper@gmail.com>"

ARG GC_VERSION
ARG GEOSUPPORT_HOME
ENV GC_VERSION "${GC_VERSION:-2.0.0-rc.5}"
ENV GEOSUPPORT_HOME "${GEOSUPPORT_HOME:-/opt/geosupport}"

RUN set -ex \
  && apt-get update \
  && apt-get install -y --no-install-recommends \
      gcc \
      g++ \
      libc6-dev \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /app

EXPOSE 8080:8080
EXPOSE 5005:5005

CMD ["/bin/bash", "-il"]
