plugins {
    id 'java'
    id 'checkstyle'
    id 'com.diffplug.spotless'
    id 'com.github.ben-manes.versions'
}

ext {
    // Files included in all published Java binary artifacts:
    // library jars, bootJar, bootWar.
    // Declared here because geoclient-service does not apply the
    // geoclient.library-conventions plugin but does apply this one.

    // Java manifest configuration
    sharedManifest = manifest {
           attributes(
               'Implementation-Title': project.name,
               'Implementation-Version': project.version,
               'Automatic-Module-Name': project.name.replace('-', '.'),  // for Jigsaw
               "Built-By": "${System.getProperty("user.name")}",
               "Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
               'Built-Gradle': gradle.gradleVersion)
    }
    // License
    licenseFilesSpec = copySpec {
        from("${project.rootDir}/src/dist") {
            include 'license.txt'
            include 'notice.txt'
            into 'META-INF'
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    }

    // Dependency version used by multiple subprojects. Should move to
    // a Gradle platform definition eventually.
    xstreamVersion = '1.4.19'
}

repositories {
    mavenCentral()
}

dependencies {
    // TODO switch back to new Gradle BOM support when spring-boot gradle-plugin can work correctly
    implementation platform('org.springframework.boot:spring-boot-dependencies:2.7.5') // Must be in sync with geoclient-service/build.gradle
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    testImplementation ('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

// Java build configuration
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
//    withJavadocJar()
    withSourcesJar()
}

// TODO Remove this hack which fixes :geoclient-service:sourcesJar failure.
// See https://github.com/gradle/gradle/issues/12451
tasks.named('sourcesJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    //options.compilerArgs = ["-Werror", "-Xlint:unchecked", "-Xlint:deprecation", "-Xlint:rawtypes", "-Xlint:varargs"]
}

normalization {
    runtimeClasspath {
        ignore 'META-INF/MANIFEST.MF'
    }
}

javadoc {
    description = 'Generates project-level javadoc for use in -javadoc jar'

    options.addStringOption('Xdoclint:none', '-quiet')
    options.author = true
    options.encoding = 'UTF-8'
    options.header = project.name
    // TODO debug slowness when uncommented: network, parse, etc...
    //options.links = [
    //    'https://docs.oracle.com/javase/8/docs/api/',
    //    'https://fasterxml.github.io/jackson-core/javadoc/2.10/',
    //    'https://fasterxml.github.io/jackson-databind/javadoc/2.10/',
    //    'https://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.10/',
    //    'https://junit.org/junit5/docs/5.5.2/api/'
    //] as String[]
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.noTimestamp = true
    options.use = true

    // Suppress warnings due to cross-module @see and @link references.
    // Note that global "api" task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
}

spotless {
    java {
        // based on JUnit5 project's spotless config (commit 3a2f7a342747dd504d70daf89a0db53145e94608)
        // eclipse().configFile rootProject.file('src/spotless/geoclient-eclipse-formatter-settings.xml')
        // endWithNewline()
        importOrderFile(rootProject.file('src/spotless/geoclient-eclipse.importorder'))
        indentWithSpaces()
        licenseHeaderFile(rootProject.file('src/spotless/apache-license-2.0.java'))
        trimTrailingWhitespace()
        toggleOffOn()
    }
    groovy {
        target '**/*.groovy'
        targetExclude '**/build/**'
        licenseHeaderFile rootProject.file('src/spotless/apache-license-2.0.java')
    }
    groovyGradle {}
}
