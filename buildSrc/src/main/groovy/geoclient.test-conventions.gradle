plugins {
    id('java')
    id('jacoco')
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom(implementation, testImplementation)
    integrationTestRuntimeOnly.extendsFrom(runtimeOnly, testRuntimeOnly)
}

dependencies {
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter'
    integrationTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test', Test) {
    useJUnitPlatform()
    testLogging {
        events "failed", "skipped"
        exceptionFormat "short"
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter(tasks.named('test'))

    useJUnitPlatform()

    environment("GEOFILES", '/opt/geosupport/current/fls/');
    testLogging {
        // options for log level LIFECYCLE
        events "failed", "skipped"
        exceptionFormat "short"

        debug {
            events "failed", "skipped", "passed"
            exceptionFormat "full"
            showStandardStreams = true
        }

        info {
            events "failed", "skipped", "passed"
            showStandardStreams = true
        }
    }
}

tasks.named('check') {
    dependsOn(integrationTest)
}

tasks.named('jacocoTestReport') {
    dependsOn test, integrationTest
    reports {
        xml.required = true
    }
}

tasks.register('aggregateTestResults', Copy) {
    from tasks.test
    from tasks.integrationTest
    into rootProject.layout.buildDirectory.dir('ci/test-results')
    include '*.xml'
    duplicatesStrategy = DuplicatesStrategy.FAIL
}

tasks.register('aggregateCoverageResults', Copy) {
    dependsOn tasks.jacocoTestReport
    from layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
    into rootProject.layout.buildDirectory.dir('ci/coverage')
    rename { String fileName ->
        "${project.name}-jacocoTestReport.xml"
    }
    duplicatesStrategy = DuplicatesStrategy.FAIL
}

// TODO fix Tar task
//tasks.register('testMetrics', Tar) {
//    dependsOn test, integrationTest, tasks.jacocoTestReport, tasks.aggregateTestResults, tasks.aggregateCoverageResults
//    from rootProject.layout.buildDirectory.dir('ci')
//    archiveFileName = 'geoclient-test-metrics.tgz'
//    compression = Compression.GZIP
//    destinationDirectory = rootProject.layout.buildDirectory
//}

tasks.register('testMetrics') {
    dependsOn tasks.aggregateTestResults, tasks.aggregateCoverageResults
}