plugins {
    id('java')
    id('jacoco')
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom(implementation, testImplementation)
    integrationTestRuntimeOnly.extendsFrom(runtimeOnly, testRuntimeOnly)
}

dependencies {
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter'
    integrationTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test', Test) {
    useJUnitPlatform()
    testLogging {
        events "failed", "skipped"
        exceptionFormat "short"
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter(tasks.named('test'))

    useJUnitPlatform()

    environment("GEOFILES", '/opt/geosupport/current/fls/');
    testLogging {
        // options for log level LIFECYCLE
        events "failed", "skipped"
        exceptionFormat "short"

        debug {
            events "failed", "skipped", "passed"
            exceptionFormat "full"
            showStandardStreams = true
        }

        info {
            events "failed", "skipped", "passed"
            showStandardStreams = true
        }
    }
}

tasks.named('check') {
    dependsOn(integrationTest)
}

tasks.named('jacocoTestReport') {
    dependsOn check
    // Will include test.exec and integrationTest.exec so integration
    // tests contribute to coverage statistics.
    executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")
    classDirectories.setFrom files(project.sourceSets.main.output)
    sourceDirectories.setFrom files(project.sourceSets.main.allSource.srcDirs)
    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/${project.name}-coverage.xml")
    }
}

tasks.register('tarCiReports', Tar) {
    into('src') {
        from sourceSets.main.allJava.srcDirs
    }
    into('test-results') {
        //from tasks.named('copyJunitXmlReports')
        from tasks.named('test').map { it.outputs.files }
        from tasks.named('integrationTest').map { it.outputs.files }
        include 'TEST-*.xml'
    }
    into('coverage') {
        //from tasks.named('copyJacocoTestReports')
        from tasks.named('jacocoTestReport').map { it.outputs.files }
        include '*-coverage.xml'
    }
    archiveFileName = "${project.name}-ci-reports.tgz"
    compression = Compression.GZIP
    destinationDirectory = layout.buildDirectory
}
