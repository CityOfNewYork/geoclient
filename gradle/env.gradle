import java.nio.file.Paths
import java.nio.file.Files

//
// Project runtime properties  | Environment vars    | Gradle command line OR | gradle.properties
//                             |                     | gradle.properties in   | in $GRADLE_USER_HOME
//                             |                     | root project directory |
ext.gsGeofiles    = resolveProperty('GEOFILES',        'gsGeofiles')       // | geoclient.gsGeofiles
ext.gsIncludePath = resolveProperty('GS_INCLUDE_PATH', 'gsIncludePath')    // | geoclient.gsIncludePath
ext.gsLibraryPath = resolveProperty('GS_LIBRARY_PATH', 'gsLibraryPath')    // | geoclient.gsLibraryPath
ext.jniJavaHome   = resolveProperty('JAVA_HOME',       'jniJavaHome')      // | geoclient.jniJavaHome
//ext.gccWinX64Path = resolveProperty('GCC_WIN_X64_PATH','gccWinX64Path')    // | geoclient.gccWinX64Path
//ext.localLibsDir  = resolveProperty('LOCAL_LIBS_DIR',  'localLibsDir')     // | geoclient.localLibsDir

ext.localLibsDir="${rootProject.buildDir}/libs"

// Value of 'java.library.path' System property to use when running Java tests 
// where JNI is used
ext.testJavaLibraryPath = files(([] << psplit(gsLibraryPath)) << [localLibsDir]).asPath

def psplit(String path) {
  if(!path) { return [] }
  path.split(System.properties['path.separator'])
}

// Adapted from gradle-docker-plugin project file: gradle/publishing.gradle
String resolveProperty(String envVarKey, String projectPropKey) {

  String propValue = System.getenv()[envVarKey]

  if(propValue) {
    return propValue
  }

  if(hasProperty(projectPropKey)) {
    return getProperty(projectPropKey)
  }

  hasProperty("geoclient.${projectPropKey}") ? getProperty("geoclient.${projectPropKey}") : null
}

task runtimeReport {
  doFirst {
    def hlog = { heading ->
      logger.lifecycle("\n${heading}")
      logger.lifecycle("---------------------------------------------------")
    }
    def plog = { cat, k, v ->
      logger.lifecycle("[$cat] $k='$v'")
    }

    hlog("JAVA SYSTEM PROPERTIES")
    def ps = System.properties
    plog("SYSPROP", "user.home",            ps["user.home"])
    plog("SYSPROP", "user.dir",             ps["user.dir"])
    plog("SYSPROP", "java.library.path",    ps["java.library.path"])
    plog("SYSPROP", "os.name",              ps["os.name"])

    hlog("\nENVIRONMENT VARIABLES")
    def ev = System.getenv()
    plog("ENV",     "GEOFILES",             ev["GEOFILES"])
    plog("ENV",     "GS_INCLUDE_PATH",      ev["GS_INCLUDE_PATH"])
    plog("ENV",     "GS_LIBRARY_PATH",      ev["GS_LIBRARY_PATH"])
    plog("ENV",     "JAVA_HOME",            ev["JAVA_HOME"])
    plog("ENV",     "LD_LIBRARY_PATH",      ev["LD_LIBRARY_PATH"])
    plog("ENV",     "PATH",                 ev["PATH"])

    hlog("\nNATIVE PROPERTIES")
    plog("NATIVE",  "gsGeofiles",           gsGeofiles)
    plog("NATIVE",  "gsIncludePath",        gsIncludePath)
    plog("NATIVE",  "gsLibraryPath",        gsLibraryPath)
    plog("NATIVE",  "jniJavaHome",          jniJavaHome)
    plog("NATIVE",  "testJavaLibraryPath",  testJavaLibraryPath)

  }
}

tasks.addRule("Pattern: lspath<ID>") { String taskName ->
  if (taskName.startsWith("lspath")) {
    task(taskName) << {
      String prop = taskName - 'lspath'
      String value = resolveProperty(prop, prop)
      if(prop && value) {
        def pathsep = System.properties['path.separator']
        logger.lifecycle("\npath.separator='${pathsep}'")
        logger.lifecycle("\n${prop}")
        logger.lifecycle("---------------------------------------------------")
        value.split(pathsep).each { line ->
          java.nio.file.Path p = Paths.get(line)
          String status = Files.exists(p) ? "" : "\t(missing)"
          logger.lifecycle("\t${line}${status}")
        }
      } else {
        logger.warn("\nPath property '${prop}' is empty or null")
      }
    }
  }
}
