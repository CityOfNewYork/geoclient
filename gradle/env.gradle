import org.gradle.api.tasks.testing.Test
import org.gradle.nativeplatform.platform.OperatingSystem

ext {
  // FIXME Worst idea EVAH!
  // This is what's really needed but project initialization order gets nutty
  //
  // project(':geoclient-native') {
  //   model {
  //     binaries {
  //       withType(NativeBinary) {
  //         if (buildable) {
  //           println "$targetPlatform is buildable"
  //         } else {
  //           println "$targetPlatform is not buildable"
  //         }
  //       }
  //     }
  //   }
  // }
  linuxOs = System.properties['os.name'].toLowerCase() == 'linux'
  x64Arch = System.properties['os.arch'].contains('64')
  nativeBuiltPlatformDir = "${linuxOs ? "linux" : "windows"}_${x64Arch ? "x64" : "x32"}"
  
  geoclientHeaderFile      = file("${project(':geoclient-native').projectDir}/src/main/headers/geoclient.h")
  generatedJniNativeSrcDir = file("${project(':geoclient-native').projectDir}/src/generated/c")
  generatedJniJavaSrcDir   = file("${project(':geoclient-jni').projectDir}/src/generated/java")

  gcIncludePath = "${project(':geoclient-native').projectDir}/src/main/headers"
  gcLibraryPath = "${project(':geoclient-native').buildDir}/libs/geoclient_jni/shared/${nativeBuiltPlatformDir}"

  gsIncludePath = resolveGeosupportProperty('GS_INCLUDE_PATH', 'gsIncludePath')
  gsLibraryPath = resolveGeosupportProperty('GS_LIBRARY_PATH', 'gsLibraryPath')
  gsGeofiles = resolveGeosupportProperty('GEOFILES', 'gsGeofiles')

  javaHome = resolveProperty('JAVA_HOME','org.gradle.java.home')
  ldLibraryPath = resolveProperty('LD_LIBRARY_PATH', 'ldLibraryPath')
  systemPath = resolveProperty('PATH', 'systemPath')
  runtimeNativeLibraryPath = files(gsLibraryPath,gcLibraryPath)
  execJavaLibraryPath = null
  execEnvironmentVars = null
  if(linuxOs) {
    execJavaLibraryPath = files(runtimeNativeLibraryPath, ldLibraryPath)
    execEnvironmentVars = ['LD_LIBRARY_PATH':execJavaLibraryPath.asPath,
                           'PATH':systemPath,
                           'GEOFILES':gsGeofiles]
  } else {
    execJavaLibraryPath = files(runtimeNativeLibraryPath, systemPath)
    execEnvironmentVars = ['PATH':execJavaLibraryPath.asPath,
                           'GEOFILES':gsGeofiles]
  }
  execSystemProperties = ['java.library.path':execJavaLibraryPath.asPath]
  //println "linuxOs=$linuxOs"
  //println "x64Arch=$x64Arch"
  //println "nativeBuiltPlatformDir=$nativeBuiltPlatformDir"
  //println "gsIncludePath=${gsIncludePath}"
  //println "gsLibraryPath=${gsLibraryPath}"
  //println "javaHome=$javaHome"
  //println "ldLibraryPath=$ldLibraryPath"
  //println "runtimeNativeLibraryPath=${runtimeNativeLibraryPath.asPath}"
  //println "execJavaLibraryPath=${execJavaLibraryPath.asPath}"
  //println "execEnvironmentVars=${execEnvironmentVars}"
  //println "execSystemProperties=${execSystemProperties}"
}

void addNativeLibraryPath (Task task) {
  // FIXME Brute force approach needs to be replaced with a clearly defined
  // build strategy for configuring the shared library path
  task.systemProperties = execSystemProperties
  task.environment = execEnvironmentVars
  println "Configured task: $task"
}

String resolveGeosupportProperty(String envVarKey, String projectPropKey) {
  def gsProp = resolveProperty(envVarKey, projectPropKey)
  if(gsProp) {
    if(!gsProp.startsWith("/") && !gsProp ==~ /^[a-zA-Z]:/) {
      gsProp = "${rootProject.projectDir}/${gsProp}"  
    }
  }
  return gsProp
}

// Copied from gradle-docker-plugin project file: gradle/publishing.gradle
String resolveProperty(String envVarKey, String projectPropKey) {
  String propValue = System.getenv()[envVarKey]
  if(propValue) {
    return propValue
  }
  hasProperty(projectPropKey) ? getProperty(projectPropKey) : null
}

task reportRuntime {
  doFirst {
    def plog = { cat, k, v->
      logger.lifecycle("[$cat] $k='$v'")
    }

    logger.info("\nJAVA SYSTEM PROPERTIES")
    logger.info("---------------------------------------------------")
    def ps = System.properties
    plog("SYS_PROP","java.user.home",    ps["java.user.home"]) 
    plog("SYS_PROP","java.user.dir",     ps["java.user.dir"]) 
    plog("SYS_PROP","java.library.path", ps["java.library.path"]) 

    def ev = System.getenv()
    logger.info("\nENVIRONMENT VARIABLES")
    logger.info("---------------------------------------------------")
    plog("ENV_VAR", "LD_LIBRARY_PATH",   ev["LD_LIBRARY_PATH"])
    plog("ENV_VAR", "GS_LIBRARY_PATH",   ev["GS_LIBRARY_PATH"])
    plog("ENV_VAR", "GC_LIBRARY_PATH",   ev["GC_LIBRARY_PATH"])
    plog("ENV_VAR", "PATH",              ev["PATH"])
    plog("ENV_VAR", "GS_INCLUDE_PATH",   ev["GS_INCLUDE_PATH"])
  }
}
