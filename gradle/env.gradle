import java.nio.file.Paths
import java.nio.file.Files
import java.util.Map 
import org.apache.tools.ant.taskdefs.condition.Os

ext {

  // Some projects need to know whether the build is running on Windows
  //   * Although not officially supported, it is possible to build the native
  //     C code on Windows x86_64
  isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
  // OS-specific gsHome is defaulted in $rootProject/gradle.properties
  gsDefaultHome = isWindows ? gsDefaultWindowsHome : gsDefaultLinuxHome
  gsHome = resolveGsHome()
  gsGeofiles = resolveGsGeofiles()
  gsIncludePath = resolveGsIncludePath()
  gsLibraryPath = resolveGsLibraryPath()

  // Used path-relative subdirectory of java.io.tmpdir when unpacking native binaries
  gcJniVersion = resolveGcJniVersion()
  
  // Build folder in root project directory for placing build artifacts needed
  // across projects but not easily scripted with Gradle DSL. Mostly native
  // binaries.
  localLibsDir="${rootProject.buildDir}/libs"

  // Environment variable name used to tweak the native system library path
  //   * Linux: LD_LIBRARY_PATH
  //   * Win64: PATH
  libraryPathEnvironmentVariableName = isWindows ? 'PATH' : 'LD_LIBRARY_PATH'
}

String resolveGcJniVersion() {
    resolveProperty('gcJniVersion', 'gc.jni.version', 'GC_JNI_VERSION', "jni-${project.version}")
}

String resolveGsHome() {
    resolveProperty('gsHome', 'gs.home', 'GEOSUPPORT_HOME', project.gsDefaultHome)
}

String resolveGsGeofiles() {
    String resolvedGsHome = resolveGsHome()
    resolveProperty('gsGeofiles', 'gs.geofiles', 'GEOFILES', "${resolvedGsHome}/fls/") // trailing slash required!
}

String resolveGsIncludePath() {
    return new File(project(':geoclient-jni').projectDir, 'lib/geosupport/headers')
}

String resolveGsLibraryPath() {
    String resolvedGsHome = resolveGsHome()
    resolveProperty('gsLibraryPath', 'gs.library.path', 'GS_LIBRARY_PATH', "${resolvedGsHome}/lib")
}


// Adapted from gradle-docker-plugin project file: gradle/publishing.gradle
String resolveProperty(gradleProp, sysProp, envProp, defaultValue = null) {
    // Priority order: gradle prop, system prop, env var. 
    // First find wins. If not found use default given (or not) by caller
    String result = null
    // 1. Give Gradle command-line/project properties precedence
    result = project.findProperty(gradleProp)
    if(result) {
        return result
    }
    // 2. Check Java System.properties
    result = System.getProperty(sysProp)
    if(result) {
        return result
    }
    // 3. Check for environment variable
    result = System.getenv()[envProp]
    if(result) {
        return result
    }
    return defaultValue
}

task runtimeReport {
  description "Display build-related environment and system properties."
  group "help"
    doFirst {
        def hlog = { heading ->
            logger.lifecycle("\n${heading}")
            logger.lifecycle("---------------------------------------------------")
        }
        def plog = { cat, k, v ->
            logger.lifecycle("[$cat] $k='$v'")
        }
        
        def ps = System.properties
        def ev = System.getenv()
        
        hlog("\nOS")
        plog("GRADLE",   "isWindows",           project.isWindows)
        plog("GRADLE",   "localLibsDir",        project.localLibsDir)
        plog("GRADLE",   "libraryPathEnvironmentVariableName", project.libraryPathEnvironmentVariableName)
        plog("ENVVAR",   "LD_LIBRARY_PATH",     ev["LD_LIBRARY_PATH"])
        plog("ENVVAR",   "PATH",                ev["PATH"])
        
        hlog("\nJAVA RUNTIME")
        plog("SYSTEM",  "user.home",           ps["user.home"])
        plog("SYSTEM",  "user.dir",            ps["user.dir"])
        plog("SYSTEM",  "java.io.tmpdir",      ps["java.io.tmpdir"])
        plog("SYSTEM",  "java.library.path",   ps["java.library.path"])
        plog("SYSTEM",  "os.name",             ps["os.name"])
        plog("SYSTEM",  "os.arch",             ps["os.arch"])
        plog("ENVVAR",  "JAVA_HOME",           ev["JAVA_HOME"])
        plog("ENVVAR",  "GRADLE_HOME",         ev["GRADLE_HOME"])
        
        hlog("\nGEOCLIENT")
        plog("GRADLE",  "gcJniVersion",        project.gcJniVersion)
        plog("SYSTEM",  "gc.jni.version",      ps["gc.jni.version"])
        plog("ENVVAR",  "GC_JNI_VERSION",      ev["GC_JNI_VERSION"])
        
        hlog("\nGEOSUPPORT")
        plog("GRADLE",  "gsHome",              project.gsHome)
        plog("GRADLE",  "gsGeofiles",          project.gsGeofiles)
        plog("GRADLE",  "gsIncludePath",       project.gsIncludePath)
        plog("GRADLE",  "gsLibraryPath",       project.gsLibraryPath)
        plog("SYSTEM",  "gs.home",             ps["gs.home"])
        plog("SYSTEM",  "gs.geofiles",         ps["gs.geofiles"])
        plog("SYSTEM",  "gs.include.path",     ps["gs.include.path"])
        plog("SYSTEM",  "gs.library.path",     ps["gs.library.path"])
        plog("ENVVAR",  "GEOSUPPORT_HOME",     ev["GEOSUPPORT_HOME"])
        plog("ENVVAR",  "GEOFILES",            ev["GEOFILES"])
        plog("ENVVAR",  "GS_INCLUDE_PATH",     ev["GS_INCLUDE_PATH"])
        plog("ENVVAR",  "GS_LIBRARY_PATH",     ev["GS_LIBRARY_PATH"])
    }
}