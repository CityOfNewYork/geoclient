import java.nio.file.Paths
import java.nio.file.Files
import org.apache.tools.ant.taskdefs.condition.Os

ext {
  // Directory containing Geosupport data files:
  //   * Defaults to null
  //   * Can be set on command line: -PgsGeofiles=...
  //   * Overidden by environment variable GEOFILES if set
  gsGeofiles = resolveProperty('GEOFILES', 'gsGeofiles')

  // Directory containing Geosupport C header files:
  //   * Defaults to ${rootDir}/geoclient-native/src/geosupport/headers
  //   * Can be set on command line: -PgsIncludePath=...
  //   * Overidden by environment variable GS_INCLUDE_PATH if set
  gsIncludePath = resolveProperty('GS_INCLUDE_PATH', 'gsIncludePath',
                  "${project(':geoclient-native').projectDir}/src/geosupport/headers")

  // Directory containing Geosupport C library binaries and link libs:
  //   * Defaults to null
  //   * Can be set on command line: -PgsLibraryPath=...
  //   * Overidden by environment variable GS_LIBRARY_PATH if set
  gsLibraryPath = resolveProperty('GS_LIBRARY_PATH', 'gsLibraryPath')

  // Top-level path to full JDK's include and platform-specific sub-directories
  // for JNI headers:
  //   * Defaults to environment variable JAVA_HOME
  //   * Can be set on command line: -PjniJavaHome=...
  //   * Overidden by environment variable JNI_JAVA_HOME if set
  jniJavaHome = resolveProperty('JNI_JAVA_HOME', 'jniJavaHome', System.env['JAVA_HOME'])

  isWindows=Os.isFamily(Os.FAMILY_WINDOWS)
  localLibsDir="${rootProject.buildDir}/libs"

  // Value of 'java.library.path' System property to use when running Java tests
  // where JNI is used
  testJavaLibraryPath = files(([] << psplit(gsLibraryPath)) << [localLibsDir]).asPath
  testSystemLibraryPath = buildSystemLibPath(testJavaLibraryPath)

}

def buildSystemLibPath(String prefix) {
  def environmentVariableName = isWindows ? 'PATH' : 'LD_LIBRARY_PATH'
  def prefixPath = psplit(prefix) as List
  def currentPath = psplit(System.getenv()[environmentVariableName]) as List
  [varname: environmentVariableName, value: "${files((prefixPath << currentPath)).asPath}"]
}

def psplit(String path) {
  if(!path) { return [] }
  path.split(System.properties['path.separator'])
}

// Adapted from gradle-docker-plugin project file: gradle/publishing.gradle
String resolveProperty(String envVarKey, String projectPropKey, String defaultValue=null) {

  String propValue = System.getenv()[envVarKey]

  if(propValue) {
    return propValue
  }

  if(hasProperty(projectPropKey)) {
    return getProperty(projectPropKey)
  }

  String result = null
  if(hasProperty("geoclient.${projectPropKey}")) {
    result = getProperty("geoclient.${projectPropKey}")
  } else {
    result = defaultValue
  }
  return result
}

task runtimeReport {
  doFirst {
    def hlog = { heading ->
      logger.lifecycle("\n${heading}")
      logger.lifecycle("---------------------------------------------------")
    }
    def plog = { cat, k, v ->
      logger.lifecycle("[$cat] $k='$v'")
    }

    hlog("JAVA SYSTEM PROPERTIES")
    def ps = System.properties
    plog("SYSPROP", "user.home",            ps["user.home"])
    plog("SYSPROP", "user.dir",             ps["user.dir"])
    plog("SYSPROP", "java.library.path",    ps["java.library.path"])
    plog("SYSPROP", "os.name",              ps["os.name"])

    hlog("\nENVIRONMENT VARIABLES")
    def ev = System.getenv()
    plog("ENV",     "GEOFILES",                 ev["GEOFILES"])
    plog("ENV",     "GS_INCLUDE_PATH",          ev["GS_INCLUDE_PATH"])
    plog("ENV",     "GS_LIBRARY_PATH",          ev["GS_LIBRARY_PATH"])
    plog("ENV",     "JAVA_HOME",                ev["JAVA_HOME"])
    plog("ENV",     "JNI_JAVA_HOME",            ev["JNI_JAVA_HOME"])
    plog("ENV",     "LD_LIBRARY_PATH",          ev["LD_LIBRARY_PATH"])
    plog("ENV",     "PATH",                     ev["PATH"])

    hlog("\nNATIVE PROPERTIES")
    plog("NATIVE",  "gsGeofiles",           gsGeofiles)
    plog("NATIVE",  "gsIncludePath",        gsIncludePath)
    plog("NATIVE",  "gsLibraryPath",        gsLibraryPath)
    plog("NATIVE",  "jniJavaHome",          jniJavaHome)
    plog("NATIVE",  "testJavaLibraryPath",  testJavaLibraryPath)

  }
}

tasks.addRule("Pattern: lspath<ID>") { String taskName ->
  if (taskName.startsWith("lspath")) {
    task(taskName) << {
      String prop = taskName - 'lspath'
      String value = resolveProperty(prop, prop)
      if(prop && value) {
        def pathsep = System.properties['path.separator']
        logger.lifecycle("\npath.separator='${pathsep}'")
        logger.lifecycle("\n${prop}")
        logger.lifecycle("---------------------------------------------------")
        value.split(pathsep).each { line ->
          java.nio.file.Path p = Paths.get(line)
          String status = Files.exists(p) ? "" : "\t(missing)"
          logger.lifecycle("\t${line}${status}")
        }
      } else {
        logger.warn("\nPath property '${prop}' is empty or null")
      }
    }
  }
}
