apply plugin: "maven-publish"
apply plugin: "signing"

// The content of this file is inspired/copied from:
// 
// https://github.com/trustin/sphinx-gradle-plugin/blob/master/build.gradle
ext {
  pomFile = file("${project.buildDir}/libs/generated-pom.xml")
  isReleaseVersion = !(project.version =~ /-SNAPSHOT$/)
  ext.uploadReleaseUrl = findProperty('nexus-upload-releases') ?: null
  ext.uploadSnapshotUrl = findProperty('nexus-upload-snapshots') ?: null
}

signing {
  required { signatory != null }
  //required { signatory != null && project.ext.isReleaseVersion }
  sign configurations.archives
}

ext.gisNexusActive = findProperty('gisNexusActive') ?: null
ext.ossrhActive = findProperty('ossrhActive') ?: null

publishing {
  repositories {
    maven {
      name 'mavenJava'
      url "${rootProject.buildDir}/repo"
    }
    if(gisNexusActive) {
      maven {
        if (project.ext.isReleaseVersion) {
          name "uploadReleaseRepo"
          url "$uploadReleaseUrl"
        } else {
          name "uploadSnapshotRepo"
          url "$uploadSnapshotUrl"
        }
        credentials {
          username "${rootProject.nexusUsername}"
          password "${rootProject.nexusPassword}"
        }
      }
    }

    if(ossrhActive) {
      maven {
        if (project.ext.isReleaseVersion) {
          url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        } else {
          url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        credentials {
          username "${rootProject.ossrhUsername}"
          password "${rootProject.ossrhPassword}"
        }
      }
    }
  }

  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      pom.withXml {
          def root = asNode()
          root.appendNode('name', "$project.name")
          root.appendNode('description', "$project.description")
          root.appendNode('url', 'https://github.com/CityOfNewYork/geoclient')
          root.appendNode('inceptionYear', '2013')

          def scm = root.appendNode('scm')
          scm.appendNode('url', 'https://github.com/CityOfNewYork/geoclient')
          scm.appendNode('connection', 'scm:https://git@github.com/CityOfNewYork/geoclient.git')
          scm.appendNode('developerConnection', 'scm:git://github.com/CityOfNewYork/geoclient.git')

          def license = root.appendNode('licenses').appendNode('license')
          license.appendNode('name', 'The Apache Software License, Version 2.0')
          license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
          license.appendNode('distribution', 'repo')

          def organization = root.appendNode('organization')
          organization.appendNode('name', 'City of New York / DoITT / Citywide GIS')
          organization.appendNode('url', 'https://maps.nyc.gov')

          def developers = root.appendNode('developers')
          def mlipper = developers.appendNode('developer')
          mlipper.appendNode('id', 'mlipper')
          mlipper.appendNode('name', 'Matthew Lipper')
          mlipper.appendNode('email', 'mlipper@doitt.nyc.gov')

          def issueManagement = root.appendNode('issueManagement')
          issueManagement.appendNode('system', 'GitHub')
          issueManagement.appendNode('url', 'https://github.com/CityOfNewYork/geoclient/issues')
      }
      //if (signing.required) {
      //  /////////////////////
      //  //logger.lifecycle("components.java: ${components.java.metaClass.properties}")
      //  // Sign the pom.xml.
      //  pom.withXml {
      //    writeTo(project.ext.pomFile)
      //    def pomAscFile = signing.sign(project.ext.pomFile).signatureFiles[0]
      //    artifact(pomAscFile) {
      //      classifier = null
      //      extension = 'pom.asc'
      //    }
      //    project.ext.pomFile.delete()
      //  }

      //  // Sign the artifacts.
      //  //project.tasks.signArchives.signatureFiles.each {
      //  //  artifact(it) {
      //  //    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
      //  //    if (matcher.find()) {
      //  //      classifier = matcher.group(1)
      //  //    } else {
      //  //      classifier = null
      //  //    }
      //  //    extension = 'jar.asc'
      //  //  }
      //  //}
      //  /////////////////////
      //}
    }
  } // publications
} // publishing

//model {
//  tasks.publishJarPublicationToMavenLocal {
//    dependsOn(project.tasks.signArchives)
//  }
//  tasks.publishJarPublicationToMavenRepository {
//    dependsOn(project.tasks.signArchives)
//  }
//}

//task install(dependsOn: publishToMavenLocal)

