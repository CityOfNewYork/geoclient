plugins {
    id 'geoclient.java-conventions'
    id 'geoclient.test-conventions'
    alias(libs.plugins.boot)
}

dependencies {
    implementation project(':geoclient-jni')
    implementation project(':geoclient-core')
    implementation project(':geoclient-parser')
    implementation(libs.commons.text)
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework:spring-oxm') { exclude(module: 'commons-lang') }
    implementation(libs.xstream)
}

tasks.register('writeVersionProperties', WriteProperties) {
    properties(['jni.version': project.version, 'core.version': project.version, 'parser.version': project.version, 'service.version': project.version])
    destinationFile = file(new File(sourceSets.main.output.resourcesDir, 'version.properties'))
}

tasks.register('copyRuntimeDiagram', Copy) {
    from("${project.rootDir}/src/doc") {
        include 'geoclient-runtime.png'
    }
    into "${sourceSets.main.output.resourcesDir}/static/images"
}

processResources {
    dependsOn('writeVersionProperties', 'copyRuntimeDiagram')
}

springBoot {
    mainClass = 'gov.nyc.doitt.gis.geoclient.service.GeoclientBootApplication'
    buildInfo() {
        excludes = ['time']
    }
}

tasks.named('bootJar') {
    requiresUnpack "**/geoclient-jni-*.jar"
    manifest {
        from(project.sharedManifest) {
            eachEntry { details ->
                //println("key: ${details.key}, baseValue: ${details.baseValue}, mergeValue: ${mergeValue}")
                if(details.baseValue && details.baseValue != details.mergeValue) {
                    //println("Values differ for key ${details.key}: [baseValue: ${details.baseValue}, mergeValue: ${mergeValue}]")
                    //println("Using baseValue: ${details.baseValue} for key ${details.key}")
                    // Do not overwrite spring-boot's value if both
                    // manifests contain the same key.
                    details.value = details.baseValue
                }
            }
        }
    }
    with(project.licenseFilesSpec)
}

def jarArchiveFileProvider = tasks.named('bootJar') { it.archiveFile }

tasks.register('dockerJar', Copy) {
    dependsOn tasks.named('bootJar')
    from jarArchiveFileProvider
    into layout.buildDirectory.dir('libs')
    rename { 'geoclient.jar' }
}

tasks.named('build') {
    finalizedBy tasks.named('dockerJar')
}

tasks.named('bootRun') {
    args '--spring.profiles.active=bootRun'
    systemProperties = [ 'gc.jni.version': 'geoclient-jni-2-bootrun' ]
}
