openapi: 3.0.3
info:
  title: Geoclient API
  version: "2.0"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://maps.nyc.gov/geoclient/v2
    description: Production server
  - url: "{scheme}://{host}:{port}/geoclient/{version}"
    description: Development server
    variables:
      scheme:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        enum:
          - "8081"
          - "443"
          - "80"
          - "84"
        default: "8081"
      version:
        enum:
          - v2
          - v1
        default: v2
components:
  parameters:
    appIdParam:
      name: app_id
      in: query
      description: Assigned application id
      schema:
        type: string
    appKeyParam:
      name: app_key
      in: query
      description: Assigned application key
      schema:
        type: string
  securitySchemes:
    apiIdAuth:
      name: app_id
      type: apiKey
      in: query
    apiKeyAuth:
      name: app_key
      type: apiKey
      in: query
security:
  - apiIdAuth:  []
    apiKeyAuth: []   # <-- no leading dash (-)
paths:
  /address:
    get:
      description: Returns street centerline-based and/or property-level data about an address
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: houseNumber
          in: query
          required: true
          schema:
            type: string
        - name: street
          in: query
          required: true
          schema:
            type: string
        - name: borough
          description: Borough of NYC (either this or 'zip' parameter is required)
          in: query
          required: false
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: zip
          description: USPS zip code (either this or 'borough' parameter is required)
          in: query
          required: false
          schema:
            type: string
  /addresspoint:
    get:
      description: Returns address point data
      responses:
        "200":
          description: OK
      parameters:
        - name: houseNumber
          in: query
          required: true
          schema:
            type: string
        - name: street
          in: query
          required: true
          schema:
            type: string
        - name: borough
          description: Borough of NYC (either this or 'zip' parameter is required)
          in: query
          required: false
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: zip
          description: USPS zip code (either this or 'borough' parameter is required)
          in: query
          required: false
          schema:
            type: string
  /bbl:
    get:
      description: Returns property-level data associated with a BBL
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: borough
          description: Borough of NYC
          in: query
          required: true
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: block
          in: query
          description: Tax block
          required: true
          schema:
            type: string
        - name: lot
          in: query
          description: Tax lot
          required: true
          schema:
            type: string
  /bin:
    get:
      description: Returns property-level data associated with a BIN
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: bin
          in: query
          description: Seven-digit Building Identification Number (BIN)
          required: true
          schema:
            type: string
  /blockface:
    get:
      description: Returns information about a street segment
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: onStreet
          in: query
          description: Name of on street
          required: true
          schema:
            type: string
        - name: crossStreetOne
          in: query
          description: First cross street
          required: true
          schema:
            type: string
        - name: crossStreetTwo
          in: query
          description: Second cross street
          required: true
          schema:
            type: string
        - name: borough
          description: Borough of NYC (applies to onStreet or all street parameters if they are in the same borough)
          in: query
          required: true
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: boroughCrossStreetOne
          description: Borough of cross street one (if different borough than 'onStreet' or if parameter 'boroughCrossStreetTwo' is used)
          in: query
          required: false
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: boroughCrossStreetTwo
          description: Borough of cross street two (if different borough than 'onStreet' or if parameter 'boroughCrossStreetOne' is used)
          in: query
          required: false
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: compassDirection
          description: Compass direction (only required when the three street parameters describe more than one segment)
          in: query
          required: false
          schema:
            type: string
            enum: ['N', 'S', 'E', 'W']
  /doc:
    get:
      description: Geoclient HTML documentation
      responses:
        "200":
          description: OK
  /intersection:
    get:
      description: Returns information about an intersection
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: crossStreetOne
          in: query
          description: First cross street
          required: true
          schema:
            type: string
        - name: crossStreetTwo
          in: query
          description: Second cross street
          required: true
          schema:
            type: string
        - name: borough
          description: Borough of NYC
          in: query
          required: true
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: boroughCrossStreetTwo
          description: Borough of cross street two (only required if different than borough for 'crossStreetOne')
          in: query
          required: false
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: compassDirection
          description: Compass direction (only required when street parameters more than once)
          in: query
          required: false
          schema:
            type: string
            enum: ['N', 'S', 'E', 'W']
  /normalize:
    get:
      description: Normalizes a street name
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: name
          description: Name of a (possibly non-existant) street
          in: query
          required: true
          schema:
            type: string
  /place:
    get:
      description: Returns street centerline-based and/or property-level data about a well-known place name
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: name
          description: Well-known NYC place name (e.g., "Empire State Building" in Manhattan)
          in: query
          required: true
          schema:
            type: string
        - name: borough
          description: Borough of NYC (either this or 'zip' parameter is required)
          in: query
          required: false
          schema:
            type: string
            enum: ['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island']
        - name: zip
          description: USPS zip code (either this or 'borough' parameter is required)
          in: query
          required: false
          schema:
            type: string
  /search:
    get:
      description: Single-field search for address, bbl, bin, blockface, intersection or place locations
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: input
          in: query
          description: Location to geocode
          required: true
          schema:
            type: string
  /streetcode:
    get:
      description: Find the the street name for a B5SC, B7SC, or B10SC street code
      responses:
        "200":
          description: OK
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
      parameters:
        - name: streetCode
          in: query
          description: B5SC, B7SC, or B10SC street code
          required: true
          schema:
            type: string
        - name: streetCodeTwo
          in: query
          description: B5SC, B7SC, or B10SC second street code
          required: false
          schema:
            type: string
        - name: streetCodeThree
          in: query
          description: B5SC, B7SC, or B10SC third street code
          required: false
          schema:
            type: string
        - name: length
          in: query
          description: target output length
          required: false
          schema:
            type: string
  /version:
    get:
      description: Geoclient and Geosupport version information
      responses:
        "200":
          description: Version information for this service
      security:
        - apiIdAuth: []
          apiKeyAuth:  []
